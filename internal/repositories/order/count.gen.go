// Code generated by github.com/gorm-gen/plugin/repository. DO NOT EDIT.
// Code generated by github.com/gorm-gen/plugin/repository. DO NOT EDIT.
// Code generated by github.com/gorm-gen/plugin/repository. DO NOT EDIT.

package order

import (
	"context"

	"go.uber.org/zap"
	"gorm.io/gen"

	"example/internal/query"

    "example/internal/repositories"
)

type count struct {
	core          *Order
	tx            *query.Query
	qTx           *query.QueryTx
	unscoped      bool
	conditionOpts []ConditionOption
}

// Count 获取数据总条数
func (o *Order) Count() *count {
	return &count{
		core:          o,
		unscoped:      o.unscoped,
		conditionOpts: make([]ConditionOption, 0),
	}
}

// Tx 设置为事务
func (c *count) Tx(tx *query.Query) *count {
	c.tx = tx
	if tx != nil {
		c.qTx = nil
	}
	return c
}

// QueryTx 设置为手动事务
func (c *count) QueryTx(tx *query.QueryTx) *count {
	c.qTx = tx
	if tx != nil {
		c.tx = nil
	}
	return c
}

func (c *count) Unscoped() *count {
	c.unscoped = true
	return c
}

func (c *count) Where(opts ...ConditionOption) *count {
	c.conditionOpts = append(c.conditionOpts, opts...)
	return c
}

// Do 执行获取数据总条数
func (c *count) Do(ctx context.Context) (int64, error) {
	cq := c.core.q.Order
	if c.tx != nil {
		cq = c.tx.Order
	}
	if c.qTx != nil {
		cq = c.qTx.Order
	}
	cr := cq.WithContext(ctx)
	if c.core.newTableName != nil && *c.core.newTableName != "" {
		cr = cq.Table(*c.core.newTableName).WithContext(ctx)
	}
	if c.unscoped {
		cr = cr.Unscoped()
	}
	if len(c.conditionOpts) > 0 {
		conditions := make([]gen.Condition, 0, len(c.conditionOpts))
		for _, opt := range c.conditionOpts {
			conditions = append(conditions, opt(c.core))
		}
		if len(conditions) > 0 {
			cr = cr.Where(conditions...)
		}
	}
	count, err := cr.Count()
	if err != nil {
		if repositories.IsRealErr(err) {
			c.core.logger.Error("【Order.Count】失败", zap.Error(err))
		}
		return 0, err
	}
	return count, nil
}
