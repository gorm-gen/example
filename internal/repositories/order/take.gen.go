// Code generated by github.com/gorm-gen/plugin/repository. DO NOT EDIT.
// Code generated by github.com/gorm-gen/plugin/repository. DO NOT EDIT.
// Code generated by github.com/gorm-gen/plugin/repository. DO NOT EDIT.

package order

import (
	"context"

	"go.uber.org/zap"
	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gorm/clause"

	"example/internal/query"

    "example/internal/repositories"

    "example/internal/models"
)

type take struct {
	core          *Order
	tx            *query.Query
	qTx           *query.QueryTx
	lock          clause.Expression
	unscoped      bool
	selects       []field.Expr
	relationOpts  []RelationOption
	orderOpts     []OrderOption
	conditionOpts []ConditionOption
}

// Take 获取一条记录
func (o *Order) Take() *take {
	return &take{
		core:          o,
		selects:       make([]field.Expr, 0),
		relationOpts:  make([]RelationOption, 0),
		orderOpts:     make([]OrderOption, 0),
		conditionOpts: make([]ConditionOption, 0),
	}
}

// Tx 设置为事务
func (t *take) Tx(tx *query.Query) *take {
	t.tx = tx
	t.qTx = nil
	return t
}

// QueryTx 设置为手动事务
func (t *take) QueryTx(tx *query.QueryTx) *take {
	t.qTx = tx
	t.tx = nil
	return t
}

func (t *take) Select(field ...field.Expr) *take {
	t.selects = append(t.selects, field...)
	return t
}

func (t *take) ForUpdate() *take {
	t.lock = clause.Locking{Strength: clause.LockingStrengthUpdate}
	return t
}

func (t *take) ForUpdateSkipLocked() *take {
	t.lock = clause.Locking{Strength: clause.LockingStrengthUpdate, Options: clause.LockingOptionsSkipLocked}
	return t
}

func (t *take) ForUpdateNoWait() *take {
	t.lock = clause.Locking{Strength: clause.LockingStrengthUpdate, Options: clause.LockingOptionsNoWait}
	return t
}

func (t *take) ForShare() *take {
	t.lock = clause.Locking{Strength: clause.LockingStrengthShare}
	return t
}

func (t *take) ForShareSkipLocked() *take {
	t.lock = clause.Locking{Strength: clause.LockingStrengthShare, Options: clause.LockingOptionsSkipLocked}
	return t
}

func (t *take) ForShareNoWait() *take {
	t.lock = clause.Locking{Strength: clause.LockingStrengthShare, Options: clause.LockingOptionsNoWait}
	return t
}

func (t *take) Unscoped() *take {
	t.unscoped = true
	return t
}

func (t *take) Relation(opts ...RelationOption) *take {
	t.relationOpts = append(t.relationOpts, opts...)
	return t
}

func (t *take) Order(opts ...OrderOption) *take {
	t.orderOpts = append(t.orderOpts, opts...)
	return t
}

func (t *take) Where(opts ...ConditionOption) *take {
	t.conditionOpts = append(t.conditionOpts, opts...)
	return t
}

// Do 执行获取一条记录
func (t *take) Do(ctx context.Context) (*models.Order, error) {
	tq := t.core.q.Order
	if t.tx != nil {
		tq = t.tx.Order
	}
	if t.qTx != nil {
		tq = t.qTx.Order
	}
	tr := tq.WithContext(ctx)
	if t.core.newTableName != nil && *t.core.newTableName != "" {
		tr = tq.Table(*t.core.newTableName).WithContext(ctx)
	}
	if len(t.selects) > 0 {
		if t.core.newTableName == nil {
			tr = tr.Select(t.selects...)
		} else {
			fs := make([]field.Expr, 0, len(t.selects))
			for _, v := range t.selects {
				fs = append(fs, field.NewField(*t.core.newTableName, v.ColumnName().String()))
			}
			tr = tr.Select(fs...)
		}
	}
	if t.unscoped {
		tr = tr.Unscoped()
	}
	if (t.tx != nil || t.qTx != nil) && t.lock != nil {
		tr = tr.Clauses(t.lock)
	}
	errFields := make([]zap.Field, 0)
	if len(t.conditionOpts) > 0 {
		conditions := make([]gen.Condition, 0, len(t.conditionOpts))
		for _, opt := range t.conditionOpts {
			conditions = append(conditions, opt(t.core))
		}
		if len(conditions) > 0 {
			errFields = append(errFields, zap.Any("conditions", conditions))
			tr = tr.Where(conditions...)
		}
	}
	if len(t.orderOpts) > 0 {
		orders := make([]field.Expr, 0, len(t.orderOpts))
		for _, opt := range t.orderOpts {
			orders = append(orders, opt(t.core))
		}
		if len(orders) > 0 {
			errFields = append(errFields, zap.Any("orders", orders))
			tr = tr.Order(orders...)
		}
	}
	if len(t.relationOpts) > 0 {
		relations := make([]field.RelationField, 0, len(t.relationOpts))
		for _, opt := range t.relationOpts {
			relations = append(relations, opt(t.core))
		}
		if len(relations) > 0 {
			errFields = append(errFields, zap.Any("relations", relations))
			tr = tr.Preload(relations...)
		}
	}
	res, err := tr.Take()
	if err != nil {
		if repositories.IsRealErr(err) {
			errFields = append(errFields, zap.Error(err))
			t.core.logger.Error("【Order.Take】失败", errFields...)
		}
		return nil, err
	}
	return res, nil
}
