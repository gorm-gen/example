// Code generated by github.com/gorm-gen/plugin/repository. DO NOT EDIT.
// Code generated by github.com/gorm-gen/plugin/repository. DO NOT EDIT.
// Code generated by github.com/gorm-gen/plugin/repository. DO NOT EDIT.

package order

import (
	"context"
	"errors"
	"fmt"
	"runtime"
	"runtime/debug"
	"sync"

	"go.uber.org/zap"
	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"

	"example/internal/query"

	"example/internal/repositories"

	"example/internal/models"
)

type _multiTake struct {
	core          *Order
	tx            *query.Query
	qTx           *query.QueryTx
	lock          clause.Expression
	unscoped      bool
	selects       []field.Expr
	orderOpts     []OrderOption
	conditionOpts []ConditionOption
	sharding      []string
	worker        chan struct{}
}

// MultiTake 获取多表随机一条记录
func (o *Order) MultiTake(sharding []string) *_multiTake {
	return &_multiTake{
		core:          o,
		unscoped:      o.unscoped,
		selects:       make([]field.Expr, 0),
		orderOpts:     make([]OrderOption, 0),
		conditionOpts: make([]ConditionOption, 0),
		sharding:      sharding,
		worker:        make(chan struct{}, runtime.NumCPU()),
	}
}

func (t *_multiTake) Worker(worker chan struct{}) *_multiTake {
	if worker == nil {
		return t
	}
	t.worker = worker
	return t
}

// Tx 设置为事务
func (t *_multiTake) Tx(tx *query.Query) *_multiTake {
	t.tx = tx
	if tx != nil {
		t.qTx = nil
	}
	return t
}

// QueryTx 设置为手动事务
func (t *_multiTake) QueryTx(tx *query.QueryTx) *_multiTake {
	t.qTx = tx
	if tx != nil {
		t.tx = nil
	}
	return t
}

func (t *_multiTake) Select(field ...field.Expr) *_multiTake {
	t.selects = append(t.selects, field...)
	return t
}

func (t *_multiTake) ForUpdate() *_multiTake {
	t.lock = clause.Locking{Strength: clause.LockingStrengthUpdate}
	return t
}

func (t *_multiTake) ForUpdateSkipLocked() *_multiTake {
	t.lock = clause.Locking{Strength: clause.LockingStrengthUpdate, Options: clause.LockingOptionsSkipLocked}
	return t
}

func (t *_multiTake) ForUpdateNoWait() *_multiTake {
	t.lock = clause.Locking{Strength: clause.LockingStrengthUpdate, Options: clause.LockingOptionsNoWait}
	return t
}

func (t *_multiTake) ForShare() *_multiTake {
	t.lock = clause.Locking{Strength: clause.LockingStrengthShare}
	return t
}

func (t *_multiTake) ForShareSkipLocked() *_multiTake {
	t.lock = clause.Locking{Strength: clause.LockingStrengthShare, Options: clause.LockingOptionsSkipLocked}
	return t
}

func (t *_multiTake) ForShareNoWait() *_multiTake {
	t.lock = clause.Locking{Strength: clause.LockingStrengthShare, Options: clause.LockingOptionsNoWait}
	return t
}

func (t *_multiTake) Unscoped() *_multiTake {
	t.unscoped = true
	return t
}

func (t *_multiTake) Order(opts ...OrderOption) *_multiTake {
	t.orderOpts = append(t.orderOpts, opts...)
	return t
}

func (t *_multiTake) Where(opts ...ConditionOption) *_multiTake {
	t.conditionOpts = append(t.conditionOpts, opts...)
	return t
}

// Do 执行获取多表随机一条记录
func (t *_multiTake) Do(ctx context.Context) (*models.Order, error) {
	if len(t.sharding) == 0 {
		return nil, gorm.ErrRecordNotFound
	}
	fq := t.core.q.Order
	if t.tx != nil {
		fq = t.tx.Order
	}
	if t.qTx != nil {
		fq = t.qTx.Order
	}
	var conditions []gen.Condition
	if len(t.conditionOpts) > 0 {
		conditions = make([]gen.Condition, 0, len(t.conditionOpts))
		for _, opt := range t.conditionOpts {
			conditions = append(conditions, opt(t.core))
		}
	}
	var fieldExpr []field.Expr
	if len(t.selects) > 0 {
		fieldExpr = make([]field.Expr, 0, len(t.selects))
		if t.core.newTableName == nil {
			fieldExpr = append(fieldExpr, t.selects...)
		} else {
			for _, v := range t.selects {
				fieldExpr = append(fieldExpr, field.NewField(*t.core.newTableName, v.ColumnName().String()))
			}
		}
	}
	var orders []field.Expr
	if len(t.orderOpts) > 0 {
		orders = make([]field.Expr, 0, len(t.orderOpts))
		for _, opt := range t.orderOpts {
			orders = append(orders, opt(t.core))
		}
	}
	wg := sync.WaitGroup{}
	endChan := make(chan struct{})
	errChan := make(chan error)
	resultChan := make(chan *models.Order)
	for _, sharding := range t.sharding {
		t.worker <- struct{}{}
		wg.Add(1)
		go func(sharding string) {
			defer func() {
				if r := recover(); r != nil {
					t.core.logger.Error(fmt.Sprintf("【Order.MultiTake.%s】执行异常", sharding), zap.Any("recover", r), zap.ByteString("debug.Stack", debug.Stack()))
					errChan <- fmt.Errorf("recovered from panic: %v", r)
				}
			}()
			defer func() {
				<-t.worker
			}()
			defer wg.Done()
			_conditions := make([]gen.Condition, len(conditions))
			copy(_conditions, conditions)
			_conditions = append(_conditions, ConditionSharding(sharding)(t.core))
			fr := fq.WithContext(ctx)
			if len(fieldExpr) > 0 {
				fr = fr.Select(fieldExpr...)
			}
			if t.unscoped {
				fr = fr.Unscoped()
			}
			if (t.tx != nil || t.qTx != nil) && t.lock != nil {
				fr = fr.Clauses(t.lock)
			}
			fr = fr.Where(_conditions...)
			if len(orders) > 0 {
				fr = fr.Order(orders...)
			}
			res, err := fr.Take()
			if err != nil {
				if repositories.IsRealErr(err) {
					t.core.logger.Error(fmt.Sprintf("【Order.MultiTake.%s】失败", sharding), zap.Error(err))
				}
				if !errors.Is(err, gorm.ErrRecordNotFound) {
					errChan <- err
				}
				return
			}
			resultChan <- res
			return
		}(sharding)
	}
	go func() {
		wg.Wait()
		endChan <- struct{}{}
	}()
	select {
	case res := <-resultChan:
		return res, nil
	case <-endChan:
		return nil, gorm.ErrRecordNotFound
	case err := <-errChan:
		return nil, err
	}
}
