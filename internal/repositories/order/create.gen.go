// Code generated by github.com/gorm-gen/plugin/repository. DO NOT EDIT.
// Code generated by github.com/gorm-gen/plugin/repository. DO NOT EDIT.
// Code generated by github.com/gorm-gen/plugin/repository. DO NOT EDIT.

package order

import (
	"context"

	"go.uber.org/zap"

	"example/internal/query"

    "example/internal/repositories"

    "example/internal/models"
)

type create struct {
	core      *Order
	tx        *query.Query
	qTx       *query.QueryTx
	unscoped  bool
	values    []*models.Order
	batchSize int
}

// Create 添加数据
func (o *Order) Create() *create {
	return &create{
		core:     o,
		unscoped: o.unscoped,
		values:   make([]*models.Order, 0),
	}
}

// Tx 设置为事务
func (c *create) Tx(tx *query.Query) *create {
	c.tx = tx
	c.qTx = nil
	return c
}

// QueryTx 设置为手动事务
func (c *create) QueryTx(tx *query.QueryTx) *create {
	c.qTx = tx
	c.tx = nil
	return c
}

func (c *create) Unscoped() *create {
	c.unscoped = true
	return c
}

func (c *create) Values(values ...*models.Order) *create {
	c.values = append(c.values, values...)
	return c
}

// BatchSize 当批量插入时指定创建的数量
func (c *create) BatchSize(batchSize uint) *create {
	c.batchSize = int(batchSize)
	return c
}

// Do 执行添加数据
func (c *create) Do(ctx context.Context) (err error) {
	length := len(c.values)
	if length == 0 {
		return nil
	}
	cq := c.core.q.Order
	if c.tx != nil {
		cq = c.tx.Order
	}
	if c.qTx != nil {
		cq = c.qTx.Order
	}
	cr := cq.WithContext(ctx)
	if c.core.newTableName != nil && *c.core.newTableName != "" {
		cr = cq.Table(*c.core.newTableName).WithContext(ctx)
	}
	if c.unscoped {
		cr = cr.Unscoped()
	}
	errFields := make([]zap.Field, 0)
	if length > 1 && c.batchSize > 0 {
		errFields = append(errFields, zap.Int("batchSize", c.batchSize))
		err = cr.CreateInBatches(c.values, c.batchSize)
	} else {
		err = cr.Create(c.values...)
	}
	if err != nil {
		if repositories.IsRealErr(err) {
			errFields = append(errFields, zap.Any("values", c.values))
			errFields = append(errFields, zap.Error(err))
			c.core.logger.Error("【Order.Create】失败", errFields...)
		}
		return err
	}
	return nil
}
