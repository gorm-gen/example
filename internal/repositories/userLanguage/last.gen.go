// Code generated by github.com/gorm-gen/repository. DO NOT EDIT.
// Code generated by github.com/gorm-gen/repository. DO NOT EDIT.
// Code generated by github.com/gorm-gen/repository. DO NOT EDIT.

package userLanguage

import (
	"context"
	"runtime/debug"

	"go.uber.org/zap"
	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gorm/clause"

	"example/internal/query"

	"example/internal/repositories"

	"example/internal/models"
)

type _last struct {
	core          *UserLanguage
	tx            *query.Query
	qTx           *query.QueryTx
	lock          clause.Expression
	unscoped      bool
	selects       []field.Expr
	relationOpts  []RelationOption
	conditionOpts []ConditionOption
	writeDB       bool
	scopes        []func(gen.Dao) gen.Dao
}

// Last 获取最后一条记录（主键降序）
func (u *UserLanguage) Last() *_last {
	return &_last{
		core:          u,
		unscoped:      u.unscoped,
		selects:       make([]field.Expr, 0),
		relationOpts:  make([]RelationOption, 0),
		conditionOpts: make([]ConditionOption, 0),
		scopes:        make([]func(gen.Dao) gen.Dao, 0),
	}
}

// Tx 设置为事务
func (l *_last) Tx(tx *query.Query) *_last {
	l.tx = tx
	if tx != nil {
		l.qTx = nil
	}
	return l
}

// QueryTx 设置为手动事务
func (l *_last) QueryTx(tx *query.QueryTx) *_last {
	l.qTx = tx
	if tx != nil {
		l.tx = nil
	}
	return l
}

func (l *_last) Select(field ...field.Expr) *_last {
	l.selects = append(l.selects, field...)
	return l
}

func (l *_last) ForUpdate() *_last {
	l.lock = clause.Locking{Strength: clause.LockingStrengthUpdate}
	return l
}

func (l *_last) ForUpdateSkipLocked() *_last {
	l.lock = clause.Locking{Strength: clause.LockingStrengthUpdate, Options: clause.LockingOptionsSkipLocked}
	return l
}

func (l *_last) ForUpdateNoWait() *_last {
	l.lock = clause.Locking{Strength: clause.LockingStrengthUpdate, Options: clause.LockingOptionsNoWait}
	return l
}

func (l *_last) ForShare() *_last {
	l.lock = clause.Locking{Strength: clause.LockingStrengthShare}
	return l
}

func (l *_last) ForShareSkipLocked() *_last {
	l.lock = clause.Locking{Strength: clause.LockingStrengthShare, Options: clause.LockingOptionsSkipLocked}
	return l
}

func (l *_last) ForShareNoWait() *_last {
	l.lock = clause.Locking{Strength: clause.LockingStrengthShare, Options: clause.LockingOptionsNoWait}
	return l
}

func (l *_last) Unscoped() *_last {
	l.unscoped = true
	return l
}

func (l *_last) Scopes(funcs ...func(gen.Dao) gen.Dao) *_last {
	l.scopes = append(l.scopes, funcs...)
	return l
}

func (l *_last) Relation(opts ...RelationOption) *_last {
	l.relationOpts = append(l.relationOpts, opts...)
	return l
}

func (l *_last) Where(opts ...ConditionOption) *_last {
	l.conditionOpts = append(l.conditionOpts, opts...)
	return l
}

func (l *_last) WriteDB() *_last {
	l.writeDB = true
	return l
}

// Do 执行获取最后一条记录（主键降序）
func (l *_last) Do(ctx context.Context) (*models.UserLanguage, error) {
	lq := l.core.q.UserLanguage
	if l.tx != nil {
		lq = l.tx.UserLanguage
	}
	if l.qTx != nil {
		lq = l.qTx.UserLanguage
	}
	lr := lq.WithContext(ctx)
	if l.core.newTableName != nil && *l.core.newTableName != "" {
		lr = lq.Table(*l.core.newTableName).WithContext(ctx)
	}
	if _len := len(l.selects); _len > 0 {
		if l.core.newTableName == nil {
			lr = lr.Select(l.selects...)
		} else {
			fs := make([]field.Expr, 0, _len)
			for _, v := range l.selects {
				fs = append(fs, field.NewField(*l.core.newTableName, v.ColumnName().String()))
			}
			lr = lr.Select(fs...)
		}
	}
	if l.writeDB {
		lr = lr.WriteDB()
	}
	if l.unscoped {
		lr = lr.Unscoped()
	}
	if len(l.scopes) > 0 {
		lr = lr.Scopes(l.scopes...)
	}
	if (l.tx != nil || l.qTx != nil) && l.lock != nil {
		lr = lr.Clauses(l.lock)
	}
	if _len := len(l.conditionOpts); _len > 0 {
		conditions := make([]gen.Condition, 0, _len)
		for _, opt := range l.conditionOpts {
			conditions = append(conditions, opt(l.core))
		}
		if len(conditions) > 0 {
			lr = lr.Where(conditions...)
		}
	}
	if _len := len(l.relationOpts); _len > 0 {
		relations := make([]field.RelationField, 0, _len)
		for _, opt := range l.relationOpts {
			relations = append(relations, opt(l.core))
		}
		if len(relations) > 0 {
			lr = lr.Preload(relations...)
		}
	}
	res, err := lr.Last()
	if err != nil {
		if repositories.IsRealErr(err) {
			l.core.logger.Error("【UserLanguage.Last】失败", zap.Error(err), zap.ByteString("debug.Stack", debug.Stack()))
		}
		return nil, err
	}
	return res, nil
}
