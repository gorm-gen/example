// Code generated by github.com/gorm-gen/repository. DO NOT EDIT.
// Code generated by github.com/gorm-gen/repository. DO NOT EDIT.
// Code generated by github.com/gorm-gen/repository. DO NOT EDIT.

package orderItem

import (
	"context"
	"errors"
	"fmt"
	"runtime"
	"runtime/debug"
	"sync"

	"go.uber.org/zap"
	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"

	"example/internal/query"

	"example/internal/models"
)

type _shardingTake struct {
	core          *OrderItem
	tx            *query.Query
	qTx           *query.QueryTx
	lock          clause.Expression
	unscoped      bool
	selects       []field.Expr
	orderOpts     []OrderOption
	conditionOpts []ConditionOption
	sharding      []int
	worker        chan struct{}
	writeDB       bool
	scopes        []func(gen.Dao) gen.Dao
}

// ShardingTake 获取分表中随机一条记录
func (o *OrderItem) ShardingTake(sharding []int) *_shardingTake {
	return &_shardingTake{
		core:          o,
		unscoped:      o.unscoped,
		selects:       make([]field.Expr, 0),
		orderOpts:     make([]OrderOption, 0),
		conditionOpts: make([]ConditionOption, 0),
		sharding:      sharding,
		worker:        make(chan struct{}, runtime.NumCPU()),
		scopes:        make([]func(gen.Dao) gen.Dao, 0),
	}
}

func (t *_shardingTake) Worker(worker chan struct{}) *_shardingTake {
	if worker == nil {
		return t
	}
	t.worker = worker
	return t
}

// Tx 设置为事务
func (t *_shardingTake) Tx(tx *query.Query) *_shardingTake {
	t.tx = tx
	if tx != nil {
		t.qTx = nil
	}
	return t
}

// QueryTx 设置为手动事务
func (t *_shardingTake) QueryTx(tx *query.QueryTx) *_shardingTake {
	t.qTx = tx
	if tx != nil {
		t.tx = nil
	}
	return t
}

func (t *_shardingTake) Select(field ...field.Expr) *_shardingTake {
	t.selects = append(t.selects, field...)
	return t
}

func (t *_shardingTake) ForUpdate() *_shardingTake {
	t.lock = clause.Locking{Strength: clause.LockingStrengthUpdate}
	return t
}

func (t *_shardingTake) ForUpdateSkipLocked() *_shardingTake {
	t.lock = clause.Locking{Strength: clause.LockingStrengthUpdate, Options: clause.LockingOptionsSkipLocked}
	return t
}

func (t *_shardingTake) ForUpdateNoWait() *_shardingTake {
	t.lock = clause.Locking{Strength: clause.LockingStrengthUpdate, Options: clause.LockingOptionsNoWait}
	return t
}

func (t *_shardingTake) ForShare() *_shardingTake {
	t.lock = clause.Locking{Strength: clause.LockingStrengthShare}
	return t
}

func (t *_shardingTake) ForShareSkipLocked() *_shardingTake {
	t.lock = clause.Locking{Strength: clause.LockingStrengthShare, Options: clause.LockingOptionsSkipLocked}
	return t
}

func (t *_shardingTake) ForShareNoWait() *_shardingTake {
	t.lock = clause.Locking{Strength: clause.LockingStrengthShare, Options: clause.LockingOptionsNoWait}
	return t
}

func (t *_shardingTake) Unscoped(unscoped ...bool) *_shardingTake {
	_unscoped := true
	if len(unscoped) > 0 {
		_unscoped = unscoped[0]
	}
	t.unscoped = _unscoped
	return t
}

func (t *_shardingTake) Scopes(funcs ...func(gen.Dao) gen.Dao) *_shardingTake {
	t.scopes = append(t.scopes, funcs...)
	return t
}

func (t *_shardingTake) Order(opts ...OrderOption) *_shardingTake {
	t.orderOpts = append(t.orderOpts, opts...)
	return t
}

func (t *_shardingTake) Where(opts ...ConditionOption) *_shardingTake {
	t.conditionOpts = append(t.conditionOpts, opts...)
	return t
}

func (t *_shardingTake) WriteDB() *_shardingTake {
	t.writeDB = true
	return t
}

// Do 执行获取分表中随机一条记录
func (t *_shardingTake) Do(ctx context.Context) (*models.OrderItem, error) {
	if len(t.sharding) == 0 {
		return nil, gorm.ErrRecordNotFound
	}
	ctx, cancel := context.WithCancel(ctx)
	defer cancel()
	_condLen := len(t.conditionOpts)
	wg := sync.WaitGroup{}
	endChan := make(chan struct{})
	errChan := make(chan error)
	resultChan := make(chan *models.OrderItem)
	for _, sharding := range t.sharding {
		t.worker <- struct{}{}
		wg.Add(1)
		go func(sharding int) {
			defer func() {
				if r := recover(); r != nil {
					t.core.logger.Error(fmt.Sprintf("【OrderItem.ShardingTake.%d】执行异常", sharding), zap.Any("recover", r), zap.ByteString("debug.Stack", debug.Stack()))
					errChan <- fmt.Errorf("recovered from panic: %v", r)
				}
			}()
			defer func() {
				<-t.worker
			}()
			defer wg.Done()
			_conditionOpts := make([]ConditionOption, _condLen, _condLen+1)
			copy(_conditionOpts, t.conditionOpts)
			_conditionOpts = append(_conditionOpts, ConditionSharding(sharding))
			tr := t.core.Take()
			tr.lock = t.lock
			tr.writeDB = t.writeDB
			res, err := tr.Tx(t.tx).
				QueryTx(t.qTx).
				Select(t.selects...).
				Unscoped(t.unscoped).
				Scopes(t.scopes...).
				Where(_conditionOpts...).
				Order(t.orderOpts...).
				Do(ctx)
			if err != nil {
				if !errors.Is(err, gorm.ErrRecordNotFound) {
					errChan <- err
				}
				return
			}
			resultChan <- res
			return
		}(sharding)
	}
	go func() {
		wg.Wait()
		endChan <- struct{}{}
	}()
	select {
	case res := <-resultChan:
		return res, nil
	case <-endChan:
		return nil, gorm.ErrRecordNotFound
	case err := <-errChan:
		return nil, err
	}
}
