// Code generated by github.com/gorm-gen/repository. DO NOT EDIT.
// Code generated by github.com/gorm-gen/repository. DO NOT EDIT.
// Code generated by github.com/gorm-gen/repository. DO NOT EDIT.

package creditCard

import (
	"context"
	"runtime/debug"

	"go.uber.org/zap"
	"gorm.io/gen"

	"example/internal/query"

	"example/internal/repositories"
)

type _count struct {
	core          *CreditCard
	tx            *query.Query
	qTx           *query.QueryTx
	unscoped      bool
	conditionOpts []ConditionOption
	writeDB       bool
	scopes        []func(gen.Dao) gen.Dao
}

// Count 获取数据总记录
func (c *CreditCard) Count() *_count {
	return &_count{
		core:          c,
		unscoped:      c.unscoped,
		conditionOpts: make([]ConditionOption, 0),
		scopes:        make([]func(gen.Dao) gen.Dao, 0),
	}
}

// Tx 设置为事务
func (c *_count) Tx(tx *query.Query) *_count {
	c.tx = tx
	if tx != nil {
		c.qTx = nil
	}
	return c
}

// QueryTx 设置为手动事务
func (c *_count) QueryTx(tx *query.QueryTx) *_count {
	c.qTx = tx
	if tx != nil {
		c.tx = nil
	}
	return c
}

func (c *_count) Unscoped() *_count {
	c.unscoped = true
	return c
}

func (c *_count) Scopes(funcs ...func(gen.Dao) gen.Dao) *_count {
	c.scopes = append(c.scopes, funcs...)
	return c
}

func (c *_count) Where(opts ...ConditionOption) *_count {
	c.conditionOpts = append(c.conditionOpts, opts...)
	return c
}

func (c *_count) WriteDB() *_count {
	c.writeDB = true
	return c
}

// Do 执行获取数据总记录
func (c *_count) Do(ctx context.Context) (int64, error) {
	cq := c.core.q.CreditCard
	if c.tx != nil {
		cq = c.tx.CreditCard
	}
	if c.qTx != nil {
		cq = c.qTx.CreditCard
	}
	cr := cq.WithContext(ctx)
	if c.core.newTableName != nil && *c.core.newTableName != "" {
		cr = cq.Table(*c.core.newTableName).WithContext(ctx)
	}
	if c.writeDB {
		cr = cr.WriteDB()
	}
	if c.unscoped {
		cr = cr.Unscoped()
	}
	if len(c.scopes) > 0 {
		cr = cr.Scopes(c.scopes...)
	}
	if _len := len(c.conditionOpts); _len > 0 {
		conditions := make([]gen.Condition, 0, _len)
		for _, opt := range c.conditionOpts {
			conditions = append(conditions, opt(c.core))
		}
		if len(conditions) > 0 {
			cr = cr.Where(conditions...)
		}
	}
	count, err := cr.Count()
	if err != nil {
		if repositories.IsRealErr(err) {
			c.core.logger.Error("【CreditCard.Count】失败", zap.Error(err), zap.ByteString("debug.Stack", debug.Stack()))
		}
		return 0, err
	}
	return count, nil
}
