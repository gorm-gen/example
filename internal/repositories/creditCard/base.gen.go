// Code generated by github.com/gorm-gen/repository. DO NOT EDIT.
// Code generated by github.com/gorm-gen/repository. DO NOT EDIT.
// Code generated by github.com/gorm-gen/repository. DO NOT EDIT.

package creditCard

import (
	"strings"
	"time"

	f "github.com/gorm-gen/field"
	"github.com/shopspring/decimal"
	"go.uber.org/zap"
	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gorm"

	"example/internal/global"

	"example/internal/query"

	"example/internal/repositories"
)

// CreditCard 仓库/Repository
type CreditCard struct {
	q            *query.Query
	db           *gorm.DB
	logger       *zap.Logger
	unscoped     bool
	newTableName *string
}

// Option CreditCard仓库初始化选项
type Option func(*CreditCard)

func WithQuery(q *query.Query) Option {
	return func(c *CreditCard) {
		c.q = q
	}
}

func WithLogger(logger *zap.Logger) Option {
	return func(c *CreditCard) {
		c.logger = logger
	}
}

func WithDB(db *gorm.DB) Option {
	return func(c *CreditCard) {
		c.db = db
	}
}

func WithNewTableName(newTableName string) Option {
	return func(c *CreditCard) {
		c.newTableName = &newTableName
	}
}

func WithUnscoped() Option {
	return func(c *CreditCard) {
		c.unscoped = true
	}
}

// New CreditCard仓库初始化
func New(opts ...Option) *CreditCard {
	c := &CreditCard{
		q:      repositories.GetQuery(),
		db:     global.DB,
		logger: global.Logger,
	}
	for _, opt := range opts {
		opt(c)
	}
	return c
}

// ConditionOption 字段条件筛选选项
type ConditionOption func(*CreditCard) gen.Condition

// Condition 自定义字段条件筛选
func Condition(condition gen.Condition) ConditionOption {
	return func(*CreditCard) gen.Condition {
		return condition
	}
}

func ConditionID(v ...int) ConditionOption {
	return func(c *CreditCard) gen.Condition {
		length := len(v)
		if c.newTableName != nil {
			if length == 0 {
				return c.q.CreditCard.Table(*c.newTableName).ID.Eq(0)
			}
			if length == 1 {
				return c.q.CreditCard.Table(*c.newTableName).ID.Eq(v[0])
			}
			return c.q.CreditCard.Table(*c.newTableName).ID.In(v...)
		}
		if length == 0 {
			return c.q.CreditCard.ID.Eq(0)
		}
		if length == 1 {
			return c.q.CreditCard.ID.Eq(v[0])
		}
		return c.q.CreditCard.ID.In(v...)
	}
}

func ConditionIDNot(v ...int) ConditionOption {
	return func(c *CreditCard) gen.Condition {
		length := len(v)
		if c.newTableName != nil {
			if length == 0 {
				return c.q.CreditCard.Table(*c.newTableName).ID.Neq(0)
			}
			if length == 1 {
				return c.q.CreditCard.Table(*c.newTableName).ID.Neq(v[0])
			}
			return c.q.CreditCard.Table(*c.newTableName).ID.NotIn(v...)
		}
		if length == 0 {
			return c.q.CreditCard.ID.Neq(0)
		}
		if length == 1 {
			return c.q.CreditCard.ID.Neq(v[0])
		}
		return c.q.CreditCard.ID.NotIn(v...)
	}
}

func ConditionIDGt(v ...int) ConditionOption {
	return func(c *CreditCard) gen.Condition {
		if c.newTableName != nil {
			if len(v) == 0 {
				return c.q.CreditCard.Table(*c.newTableName).ID.Gt(0)
			}
			return c.q.CreditCard.Table(*c.newTableName).ID.Gt(v[0])
		}
		if len(v) == 0 {
			return c.q.CreditCard.ID.Gt(0)
		}
		return c.q.CreditCard.ID.Gt(v[0])
	}
}

func ConditionIDGte(v ...int) ConditionOption {
	return func(c *CreditCard) gen.Condition {
		if c.newTableName != nil {
			if len(v) == 0 {
				return c.q.CreditCard.Table(*c.newTableName).ID.Gte(0)
			}
			return c.q.CreditCard.Table(*c.newTableName).ID.Gte(v[0])
		}
		if len(v) == 0 {
			return c.q.CreditCard.ID.Gte(0)
		}
		return c.q.CreditCard.ID.Gte(v[0])
	}
}

func ConditionIDLt(v ...int) ConditionOption {
	return func(c *CreditCard) gen.Condition {
		if c.newTableName != nil {
			if len(v) == 0 {
				return c.q.CreditCard.Table(*c.newTableName).ID.Lt(0)
			}
			return c.q.CreditCard.Table(*c.newTableName).ID.Lt(v[0])
		}
		if len(v) == 0 {
			return c.q.CreditCard.ID.Lt(0)
		}
		return c.q.CreditCard.ID.Lt(v[0])
	}
}

func ConditionIDLte(v ...int) ConditionOption {
	return func(c *CreditCard) gen.Condition {
		if c.newTableName != nil {
			if len(v) == 0 {
				return c.q.CreditCard.Table(*c.newTableName).ID.Lte(0)
			}
			return c.q.CreditCard.Table(*c.newTableName).ID.Lte(v[0])
		}
		if len(v) == 0 {
			return c.q.CreditCard.ID.Lte(0)
		}
		return c.q.CreditCard.ID.Lte(v[0])
	}
}

func ConditionIDBetween(left, right int) ConditionOption {
	return func(c *CreditCard) gen.Condition {
		if c.newTableName != nil {
			return c.q.CreditCard.Table(*c.newTableName).ID.Between(left, right)
		}
		return c.q.CreditCard.ID.Between(left, right)
	}
}

func ConditionIDNotBetween(left, right int) ConditionOption {
	return func(c *CreditCard) gen.Condition {
		if c.newTableName != nil {
			return c.q.CreditCard.Table(*c.newTableName).ID.NotBetween(left, right)
		}
		return c.q.CreditCard.ID.NotBetween(left, right)
	}
}

func ConditionNumber(v ...string) ConditionOption {
	return func(c *CreditCard) gen.Condition {
		length := len(v)
		if c.newTableName != nil {
			if length == 0 {
				return c.q.CreditCard.Table(*c.newTableName).Number.Eq("")
			}
			return c.q.CreditCard.Table(*c.newTableName).Number.Eq(v[0])
		}
		if length == 0 {
			return c.q.CreditCard.Number.Eq("")
		}
		return c.q.CreditCard.Number.Eq(v[0])
	}
}

func ConditionNumberNeq(v ...string) ConditionOption {
	return func(c *CreditCard) gen.Condition {
		length := len(v)
		if c.newTableName != nil {
			if length == 0 {
				return c.q.CreditCard.Table(*c.newTableName).Number.Neq("")
			}
			return c.q.CreditCard.Table(*c.newTableName).Number.Neq(v[0])
		}
		if length == 0 {
			return c.q.CreditCard.Number.Neq("")
		}
		return c.q.CreditCard.Number.Neq(v[0])
	}
}

func ConditionNumberLike(v string) ConditionOption {
	return func(c *CreditCard) gen.Condition {
		if !strings.Contains(v, "%") {
			v = "%" + v + "%"
		}
		if c.newTableName != nil {
			return c.q.CreditCard.Table(*c.newTableName).Number.Like(v)
		}
		return c.q.CreditCard.Number.Like(v)
	}
}

func ConditionNumberNotLike(v string) ConditionOption {
	return func(c *CreditCard) gen.Condition {
		if !strings.Contains(v, "%") {
			v = "%" + v + "%"
		}
		if c.newTableName != nil {
			return c.q.CreditCard.Table(*c.newTableName).Number.NotLike(v)
		}
		return c.q.CreditCard.Number.NotLike(v)
	}
}

func ConditionUserID(v ...int) ConditionOption {
	return func(c *CreditCard) gen.Condition {
		length := len(v)
		if c.newTableName != nil {
			if length == 0 {
				return c.q.CreditCard.Table(*c.newTableName).UserID.Eq(0)
			}
			if length == 1 {
				return c.q.CreditCard.Table(*c.newTableName).UserID.Eq(v[0])
			}
			return c.q.CreditCard.Table(*c.newTableName).UserID.In(v...)
		}
		if length == 0 {
			return c.q.CreditCard.UserID.Eq(0)
		}
		if length == 1 {
			return c.q.CreditCard.UserID.Eq(v[0])
		}
		return c.q.CreditCard.UserID.In(v...)
	}
}

func ConditionUserIDNot(v ...int) ConditionOption {
	return func(c *CreditCard) gen.Condition {
		length := len(v)
		if c.newTableName != nil {
			if length == 0 {
				return c.q.CreditCard.Table(*c.newTableName).UserID.Neq(0)
			}
			if length == 1 {
				return c.q.CreditCard.Table(*c.newTableName).UserID.Neq(v[0])
			}
			return c.q.CreditCard.Table(*c.newTableName).UserID.NotIn(v...)
		}
		if length == 0 {
			return c.q.CreditCard.UserID.Neq(0)
		}
		if length == 1 {
			return c.q.CreditCard.UserID.Neq(v[0])
		}
		return c.q.CreditCard.UserID.NotIn(v...)
	}
}

func ConditionUserIDGt(v ...int) ConditionOption {
	return func(c *CreditCard) gen.Condition {
		if c.newTableName != nil {
			if len(v) == 0 {
				return c.q.CreditCard.Table(*c.newTableName).UserID.Gt(0)
			}
			return c.q.CreditCard.Table(*c.newTableName).UserID.Gt(v[0])
		}
		if len(v) == 0 {
			return c.q.CreditCard.UserID.Gt(0)
		}
		return c.q.CreditCard.UserID.Gt(v[0])
	}
}

func ConditionUserIDGte(v ...int) ConditionOption {
	return func(c *CreditCard) gen.Condition {
		if c.newTableName != nil {
			if len(v) == 0 {
				return c.q.CreditCard.Table(*c.newTableName).UserID.Gte(0)
			}
			return c.q.CreditCard.Table(*c.newTableName).UserID.Gte(v[0])
		}
		if len(v) == 0 {
			return c.q.CreditCard.UserID.Gte(0)
		}
		return c.q.CreditCard.UserID.Gte(v[0])
	}
}

func ConditionUserIDLt(v ...int) ConditionOption {
	return func(c *CreditCard) gen.Condition {
		if c.newTableName != nil {
			if len(v) == 0 {
				return c.q.CreditCard.Table(*c.newTableName).UserID.Lt(0)
			}
			return c.q.CreditCard.Table(*c.newTableName).UserID.Lt(v[0])
		}
		if len(v) == 0 {
			return c.q.CreditCard.UserID.Lt(0)
		}
		return c.q.CreditCard.UserID.Lt(v[0])
	}
}

func ConditionUserIDLte(v ...int) ConditionOption {
	return func(c *CreditCard) gen.Condition {
		if c.newTableName != nil {
			if len(v) == 0 {
				return c.q.CreditCard.Table(*c.newTableName).UserID.Lte(0)
			}
			return c.q.CreditCard.Table(*c.newTableName).UserID.Lte(v[0])
		}
		if len(v) == 0 {
			return c.q.CreditCard.UserID.Lte(0)
		}
		return c.q.CreditCard.UserID.Lte(v[0])
	}
}

func ConditionUserIDBetween(left, right int) ConditionOption {
	return func(c *CreditCard) gen.Condition {
		if c.newTableName != nil {
			return c.q.CreditCard.Table(*c.newTableName).UserID.Between(left, right)
		}
		return c.q.CreditCard.UserID.Between(left, right)
	}
}

func ConditionUserIDNotBetween(left, right int) ConditionOption {
	return func(c *CreditCard) gen.Condition {
		if c.newTableName != nil {
			return c.q.CreditCard.Table(*c.newTableName).UserID.NotBetween(left, right)
		}
		return c.q.CreditCard.UserID.NotBetween(left, right)
	}
}

func ConditionCreatedAt(v ...time.Time) ConditionOption {
	return func(c *CreditCard) gen.Condition {
		if c.newTableName != nil {
			if len(v) > 0 && !v[0].IsZero() {
				return c.q.CreditCard.Table(*c.newTableName).CreatedAt.Eq(v[0])
			}
			return c.q.CreditCard.Table(*c.newTableName).CreatedAt.Eq(time.Now())
		}
		if len(v) > 0 && !v[0].IsZero() {
			return c.q.CreditCard.CreatedAt.Eq(v[0])
		}
		return c.q.CreditCard.CreatedAt.Eq(time.Now())
	}
}

func ConditionCreatedAtNeq(v ...time.Time) ConditionOption {
	return func(c *CreditCard) gen.Condition {
		if c.newTableName != nil {
			if len(v) > 0 && !v[0].IsZero() {
				return c.q.CreditCard.Table(*c.newTableName).CreatedAt.Neq(v[0])
			}
			return c.q.CreditCard.Table(*c.newTableName).CreatedAt.Neq(time.Now())
		}
		if len(v) > 0 && !v[0].IsZero() {
			return c.q.CreditCard.CreatedAt.Neq(v[0])
		}
		return c.q.CreditCard.CreatedAt.Neq(time.Now())
	}
}

func ConditionCreatedAtGt(v ...time.Time) ConditionOption {
	return func(c *CreditCard) gen.Condition {
		if c.newTableName != nil {
			if len(v) > 0 && !v[0].IsZero() {
				return c.q.CreditCard.Table(*c.newTableName).CreatedAt.Gt(v[0])
			}
			return c.q.CreditCard.Table(*c.newTableName).CreatedAt.Gt(time.Now())
		}
		if len(v) > 0 && !v[0].IsZero() {
			return c.q.CreditCard.CreatedAt.Gt(v[0])
		}
		return c.q.CreditCard.CreatedAt.Gt(time.Now())
	}
}

func ConditionCreatedAtGte(v ...time.Time) ConditionOption {
	return func(c *CreditCard) gen.Condition {
		if c.newTableName != nil {
			if len(v) > 0 && !v[0].IsZero() {
				return c.q.CreditCard.Table(*c.newTableName).CreatedAt.Gte(v[0])
			}
			return c.q.CreditCard.Table(*c.newTableName).CreatedAt.Gte(time.Now())
		}
		if len(v) > 0 && !v[0].IsZero() {
			return c.q.CreditCard.CreatedAt.Gte(v[0])
		}
		return c.q.CreditCard.CreatedAt.Gte(time.Now())
	}
}

func ConditionCreatedAtLt(v ...time.Time) ConditionOption {
	return func(c *CreditCard) gen.Condition {
		if c.newTableName != nil {
			if len(v) > 0 && !v[0].IsZero() {
				return c.q.CreditCard.Table(*c.newTableName).CreatedAt.Lt(v[0])
			}
			return c.q.CreditCard.Table(*c.newTableName).CreatedAt.Lt(time.Now())
		}
		if len(v) > 0 && !v[0].IsZero() {
			return c.q.CreditCard.CreatedAt.Lt(v[0])
		}
		return c.q.CreditCard.CreatedAt.Lt(time.Now())
	}
}

func ConditionCreatedAtLte(v ...time.Time) ConditionOption {
	return func(c *CreditCard) gen.Condition {
		if c.newTableName != nil {
			if len(v) > 0 && !v[0].IsZero() {
				return c.q.CreditCard.Table(*c.newTableName).CreatedAt.Lte(v[0])
			}
			return c.q.CreditCard.Table(*c.newTableName).CreatedAt.Lte(time.Now())
		}
		if len(v) > 0 && !v[0].IsZero() {
			return c.q.CreditCard.CreatedAt.Lte(v[0])
		}
		return c.q.CreditCard.CreatedAt.Lte(time.Now())
	}
}

func ConditionCreatedAtBetween(left, right time.Time) ConditionOption {
	return func(c *CreditCard) gen.Condition {
		if c.newTableName != nil {
			return c.q.CreditCard.Table(*c.newTableName).CreatedAt.Between(left, right)
		}
		return c.q.CreditCard.CreatedAt.Between(left, right)
	}
}

func ConditionCreatedAtNotBetween(left, right time.Time) ConditionOption {
	return func(c *CreditCard) gen.Condition {
		if c.newTableName != nil {
			return c.q.CreditCard.Table(*c.newTableName).CreatedAt.NotBetween(left, right)
		}
		return c.q.CreditCard.CreatedAt.NotBetween(left, right)
	}
}

func ConditionUpdatedAt(v ...time.Time) ConditionOption {
	return func(c *CreditCard) gen.Condition {
		if c.newTableName != nil {
			if len(v) > 0 && !v[0].IsZero() {
				return c.q.CreditCard.Table(*c.newTableName).UpdatedAt.Eq(v[0])
			}
			return c.q.CreditCard.Table(*c.newTableName).UpdatedAt.Eq(time.Now())
		}
		if len(v) > 0 && !v[0].IsZero() {
			return c.q.CreditCard.UpdatedAt.Eq(v[0])
		}
		return c.q.CreditCard.UpdatedAt.Eq(time.Now())
	}
}

func ConditionUpdatedAtNeq(v ...time.Time) ConditionOption {
	return func(c *CreditCard) gen.Condition {
		if c.newTableName != nil {
			if len(v) > 0 && !v[0].IsZero() {
				return c.q.CreditCard.Table(*c.newTableName).UpdatedAt.Neq(v[0])
			}
			return c.q.CreditCard.Table(*c.newTableName).UpdatedAt.Neq(time.Now())
		}
		if len(v) > 0 && !v[0].IsZero() {
			return c.q.CreditCard.UpdatedAt.Neq(v[0])
		}
		return c.q.CreditCard.UpdatedAt.Neq(time.Now())
	}
}

func ConditionUpdatedAtGt(v ...time.Time) ConditionOption {
	return func(c *CreditCard) gen.Condition {
		if c.newTableName != nil {
			if len(v) > 0 && !v[0].IsZero() {
				return c.q.CreditCard.Table(*c.newTableName).UpdatedAt.Gt(v[0])
			}
			return c.q.CreditCard.Table(*c.newTableName).UpdatedAt.Gt(time.Now())
		}
		if len(v) > 0 && !v[0].IsZero() {
			return c.q.CreditCard.UpdatedAt.Gt(v[0])
		}
		return c.q.CreditCard.UpdatedAt.Gt(time.Now())
	}
}

func ConditionUpdatedAtGte(v ...time.Time) ConditionOption {
	return func(c *CreditCard) gen.Condition {
		if c.newTableName != nil {
			if len(v) > 0 && !v[0].IsZero() {
				return c.q.CreditCard.Table(*c.newTableName).UpdatedAt.Gte(v[0])
			}
			return c.q.CreditCard.Table(*c.newTableName).UpdatedAt.Gte(time.Now())
		}
		if len(v) > 0 && !v[0].IsZero() {
			return c.q.CreditCard.UpdatedAt.Gte(v[0])
		}
		return c.q.CreditCard.UpdatedAt.Gte(time.Now())
	}
}

func ConditionUpdatedAtLt(v ...time.Time) ConditionOption {
	return func(c *CreditCard) gen.Condition {
		if c.newTableName != nil {
			if len(v) > 0 && !v[0].IsZero() {
				return c.q.CreditCard.Table(*c.newTableName).UpdatedAt.Lt(v[0])
			}
			return c.q.CreditCard.Table(*c.newTableName).UpdatedAt.Lt(time.Now())
		}
		if len(v) > 0 && !v[0].IsZero() {
			return c.q.CreditCard.UpdatedAt.Lt(v[0])
		}
		return c.q.CreditCard.UpdatedAt.Lt(time.Now())
	}
}

func ConditionUpdatedAtLte(v ...time.Time) ConditionOption {
	return func(c *CreditCard) gen.Condition {
		if c.newTableName != nil {
			if len(v) > 0 && !v[0].IsZero() {
				return c.q.CreditCard.Table(*c.newTableName).UpdatedAt.Lte(v[0])
			}
			return c.q.CreditCard.Table(*c.newTableName).UpdatedAt.Lte(time.Now())
		}
		if len(v) > 0 && !v[0].IsZero() {
			return c.q.CreditCard.UpdatedAt.Lte(v[0])
		}
		return c.q.CreditCard.UpdatedAt.Lte(time.Now())
	}
}

func ConditionUpdatedAtBetween(left, right time.Time) ConditionOption {
	return func(c *CreditCard) gen.Condition {
		if c.newTableName != nil {
			return c.q.CreditCard.Table(*c.newTableName).UpdatedAt.Between(left, right)
		}
		return c.q.CreditCard.UpdatedAt.Between(left, right)
	}
}

func ConditionUpdatedAtNotBetween(left, right time.Time) ConditionOption {
	return func(c *CreditCard) gen.Condition {
		if c.newTableName != nil {
			return c.q.CreditCard.Table(*c.newTableName).UpdatedAt.NotBetween(left, right)
		}
		return c.q.CreditCard.UpdatedAt.NotBetween(left, right)
	}
}

func ConditionDeletedAtIsZero() ConditionOption {
	return func(c *CreditCard) gen.Condition {
		if c.newTableName != nil {
			return f.NewDecimal(c.q.CreditCard.DeletedAt, f.WithTableName(*c.newTableName)).Eq(decimal.Zero)
		}
		return f.NewDecimal(c.q.CreditCard.DeletedAt).Eq(decimal.Zero)
	}
}

func ConditionDeletedAtGtZero() ConditionOption {
	return func(c *CreditCard) gen.Condition {
		if c.newTableName != nil {
			return f.NewDecimal(c.q.CreditCard.DeletedAt, f.WithTableName(*c.newTableName)).Gt(decimal.Zero)
		}
		return f.NewDecimal(c.q.CreditCard.DeletedAt).Gt(decimal.Zero)
	}
}

// UpdateOption 数据更新选项
type UpdateOption func(*CreditCard) field.AssignExpr

// Update 自定义数据更新
func Update(update field.AssignExpr) UpdateOption {
	return func(*CreditCard) field.AssignExpr {
		return update
	}
}

func UpdateNumber(v string) UpdateOption {
	return func(c *CreditCard) field.AssignExpr {
		if c.newTableName != nil {
			return c.q.CreditCard.Table(*c.newTableName).Number.Value(v)
		}
		return c.q.CreditCard.Number.Value(v)
	}
}

func UpdateUserID(v int) UpdateOption {
	return func(c *CreditCard) field.AssignExpr {
		if c.newTableName != nil {
			return c.q.CreditCard.Table(*c.newTableName).UserID.Value(v)
		}
		return c.q.CreditCard.UserID.Value(v)
	}
}

// UpdateUserIDAdd +=
func UpdateUserIDAdd(v ...int) UpdateOption {
	return func(c *CreditCard) field.AssignExpr {
		_v := int(1)
		if len(v) > 0 {
			_v = v[0]
		}
		if c.newTableName != nil {
			return c.q.CreditCard.Table(*c.newTableName).UserID.Add(_v)
		}
		return c.q.CreditCard.UserID.Add(_v)
	}
}

// UpdateUserIDSub -=
func UpdateUserIDSub(v ...int) UpdateOption {
	return func(c *CreditCard) field.AssignExpr {
		_v := int(1)
		if len(v) > 0 {
			_v = v[0]
		}
		if c.newTableName != nil {
			return c.q.CreditCard.Table(*c.newTableName).UserID.Sub(_v)
		}
		return c.q.CreditCard.UserID.Sub(_v)
	}
}

// UpdateUserIDMul *=
func UpdateUserIDMul(v int) UpdateOption {
	return func(c *CreditCard) field.AssignExpr {
		if c.newTableName != nil {
			return c.q.CreditCard.Table(*c.newTableName).UserID.Mul(v)
		}
		return c.q.CreditCard.UserID.Mul(v)
	}
}

// UpdateUserIDDiv /=
func UpdateUserIDDiv(v int) UpdateOption {
	return func(c *CreditCard) field.AssignExpr {
		if c.newTableName != nil {
			return c.q.CreditCard.Table(*c.newTableName).UserID.Div(v)
		}
		return c.q.CreditCard.UserID.Div(v)
	}
}

func UpdateCreatedAt(v time.Time) UpdateOption {
	return func(c *CreditCard) field.AssignExpr {
		if c.newTableName != nil {
			return c.q.CreditCard.Table(*c.newTableName).CreatedAt.Value(v)
		}
		return c.q.CreditCard.CreatedAt.Value(v)
	}
}

func UpdateUpdatedAt(v time.Time) UpdateOption {
	return func(c *CreditCard) field.AssignExpr {
		if c.newTableName != nil {
			return c.q.CreditCard.Table(*c.newTableName).UpdatedAt.Value(v)
		}
		return c.q.CreditCard.UpdatedAt.Value(v)
	}
}

// OrderOption 数据排序选项
type OrderOption func(*CreditCard) field.Expr

// Order 自定义数据排序
func OrderBy(order field.Expr) OrderOption {
	return func(*CreditCard) field.Expr {
		return order
	}
}

func OrderIDAsc() OrderOption {
	return func(c *CreditCard) field.Expr {
		if c.newTableName != nil {
			return c.q.CreditCard.Table(*c.newTableName).ID.Asc()
		}
		return c.q.CreditCard.ID.Asc()
	}
}

func OrderIDDesc() OrderOption {
	return func(c *CreditCard) field.Expr {
		if c.newTableName != nil {
			return c.q.CreditCard.Table(*c.newTableName).ID.Desc()
		}
		return c.q.CreditCard.ID.Desc()
	}
}

func OrderCreatedAtAsc() OrderOption {
	return func(c *CreditCard) field.Expr {
		if c.newTableName != nil {
			return c.q.CreditCard.Table(*c.newTableName).CreatedAt.Asc()
		}
		return c.q.CreditCard.CreatedAt.Asc()
	}
}

func OrderCreatedAtDesc() OrderOption {
	return func(c *CreditCard) field.Expr {
		if c.newTableName != nil {
			return c.q.CreditCard.Table(*c.newTableName).CreatedAt.Desc()
		}
		return c.q.CreditCard.CreatedAt.Desc()
	}
}

func OrderUpdatedAtAsc() OrderOption {
	return func(c *CreditCard) field.Expr {
		if c.newTableName != nil {
			return c.q.CreditCard.Table(*c.newTableName).UpdatedAt.Asc()
		}
		return c.q.CreditCard.UpdatedAt.Asc()
	}
}

func OrderUpdatedAtDesc() OrderOption {
	return func(c *CreditCard) field.Expr {
		if c.newTableName != nil {
			return c.q.CreditCard.Table(*c.newTableName).UpdatedAt.Desc()
		}
		return c.q.CreditCard.UpdatedAt.Desc()
	}
}

// RelationOption 关联模型预加载选项
type RelationOption func(*CreditCard) field.RelationField

// Relation 自定义关联模型预加载
func Relation(relation field.RelationField) RelationOption {
	return func(*CreditCard) field.RelationField {
		return relation
	}
}

func RelationAll() RelationOption {
	return func(*CreditCard) field.RelationField {
		return field.Associations
	}
}
