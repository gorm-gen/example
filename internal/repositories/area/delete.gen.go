// Code generated by github.com/gorm-gen/repository. DO NOT EDIT.
// Code generated by github.com/gorm-gen/repository. DO NOT EDIT.
// Code generated by github.com/gorm-gen/repository. DO NOT EDIT.

package area

import (
	"context"
	"runtime/debug"

	"go.uber.org/zap"
	"gorm.io/gen"

	"example/internal/query"

	"example/internal/repositories"
)

type _delete struct {
	core          *Area
	tx            *query.Query
	qTx           *query.QueryTx
	unscoped      bool
	conditionOpts []ConditionOption
}

// Delete 删除数据
func (a *Area) Delete() *_delete {
	return &_delete{
		core:          a,
		unscoped:      a.unscoped,
		conditionOpts: make([]ConditionOption, 0),
	}
}

// Tx 设置为事务
func (d *_delete) Tx(tx *query.Query) *_delete {
	d.tx = tx
	if tx != nil {
		d.qTx = nil
	}
	return d
}

// QueryTx 设置为手动事务
func (d *_delete) QueryTx(tx *query.QueryTx) *_delete {
	d.qTx = tx
	if tx != nil {
		d.tx = nil
	}
	return d
}

func (d *_delete) Unscoped() *_delete {
	d.unscoped = true
	return d
}

func (d *_delete) Where(opts ...ConditionOption) *_delete {
	d.conditionOpts = append(d.conditionOpts, opts...)
	return d
}

// Do 执行删除数据
func (d *_delete) Do(ctx context.Context) (int64, error) {
	dq := d.core.q.Area
	if d.tx != nil {
		dq = d.tx.Area
	}
	if d.qTx != nil {
		dq = d.qTx.Area
	}
	dr := dq.WithContext(ctx)
	if d.core.newTableName != nil && *d.core.newTableName != "" {
		dr = dq.Table(*d.core.newTableName).WithContext(ctx)
	}
	if d.unscoped {
		dr = dr.Unscoped()
	}
	if _len := len(d.conditionOpts); _len > 0 {
		conditions := make([]gen.Condition, 0, _len)
		for _, opt := range d.conditionOpts {
			conditions = append(conditions, opt(d.core))
		}
		if len(conditions) > 0 {
			dr = dr.Where(conditions...)
		}
	}
	res, err := dr.Delete()
	if err != nil {
		if repositories.IsRealErr(err) {
			d.core.logger.Error("【Area.Delete】失败", zap.Error(err), zap.ByteString("debug.Stack", debug.Stack()))
		}
		return 0, err
	}
	return res.RowsAffected, nil
}
