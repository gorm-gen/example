// Code generated by github.com/gorm-gen/repository. DO NOT EDIT.
// Code generated by github.com/gorm-gen/repository. DO NOT EDIT.
// Code generated by github.com/gorm-gen/repository. DO NOT EDIT.

package area

import (
	"context"
	"runtime/debug"

	"github.com/shopspring/decimal"
	"go.uber.org/zap"
	"gorm.io/gen"
	"gorm.io/gen/field"

	"example/internal/query"

	"example/internal/repositories"
)

type _sum struct {
	core          *Area
	tx            *query.Query
	qTx           *query.QueryTx
	unscoped      bool
	genField      field.Expr
	conditionOpts []ConditionOption
	writeDB       bool
}

// Sum SUM数据
func (a *Area) Sum(genField field.Expr) *_sum {
	return &_sum{
		core:          a,
		unscoped:      a.unscoped,
		genField:      genField,
		conditionOpts: make([]ConditionOption, 0),
	}
}

// Tx 设置为事务
func (s *_sum) Tx(tx *query.Query) *_sum {
	s.tx = tx
	if tx != nil {
		s.qTx = nil
	}
	return s
}

// QueryTx 设置为手动事务
func (s *_sum) QueryTx(tx *query.QueryTx) *_sum {
	s.qTx = tx
	if tx != nil {
		s.tx = nil
	}
	return s
}

func (s *_sum) Unscoped() *_sum {
	s.unscoped = true
	return s
}

func (s *_sum) WriteDB() *_sum {
	s.writeDB = true
	return s
}

func (s *_sum) Where(opts ...ConditionOption) *_sum {
	s.conditionOpts = append(s.conditionOpts, opts...)
	return s
}

type Sum struct {
    Sum decimal.Decimal `json:"sum"`
}

// Do 执行SUM数据
func (s *_sum) Do(ctx context.Context) (decimal.Decimal, error) {
	sq := s.core.q.Area
	if s.tx != nil {
		sq = s.tx.Area
	}
	if s.qTx != nil {
		sq = s.qTx.Area
	}
	expr := field.NewField("", s.genField.ColumnName().String()).Sum().As("sum")
	sr := sq.WithContext(ctx)
	if s.core.newTableName != nil && *s.core.newTableName != "" {
		sr = sq.Table(*s.core.newTableName).WithContext(ctx)
	}
	sr = sr.Select(expr)
	if s.writeDB {
		sr = sr.WriteDB()
	}
	if s.unscoped {
		sr = sr.Unscoped()
	}
	if _len := len(s.conditionOpts); _len > 0 {
		conditions := make([]gen.Condition, 0, _len)
		for _, opt := range s.conditionOpts {
			conditions = append(conditions, opt(s.core))
		}
		if len(conditions) > 0 {
			sr = sr.Where(conditions...)
		}
	}
	var data Sum
	if err := sr.Scan(&data); err != nil {
		if repositories.IsRealErr(err) {
			s.core.logger.Error("【Area.Sum】失败", zap.Error(err), zap.ByteString("debug.Stack", debug.Stack()))
		}
		return decimal.Zero, err
	}
	return data.Sum, nil
}
