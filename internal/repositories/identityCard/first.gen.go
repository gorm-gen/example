// Code generated by github.com/gorm-gen/repository. DO NOT EDIT.
// Code generated by github.com/gorm-gen/repository. DO NOT EDIT.
// Code generated by github.com/gorm-gen/repository. DO NOT EDIT.

package identityCard

import (
	"context"
	"runtime/debug"

	"go.uber.org/zap"
	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gorm/clause"

	"example/internal/query"

	"example/internal/repositories"

	"example/internal/models"
)

type _first struct {
	core          *IdentityCard
	tx            *query.Query
	qTx           *query.QueryTx
	lock          clause.Expression
	unscoped      bool
	selects       []field.Expr
	relationOpts  []RelationOption
	conditionOpts []ConditionOption
	writeDB       bool
	scopes        []func(gen.Dao) gen.Dao
}

// First 获取第一条记录（主键升序）
func (i *IdentityCard) First() *_first {
	return &_first{
		core:          i,
		selects:       make([]field.Expr, 0),
		relationOpts:  make([]RelationOption, 0),
		conditionOpts: make([]ConditionOption, 0),
		scopes:        make([]func(gen.Dao) gen.Dao, 0),
	}
}

// Tx 设置为事务
func (f *_first) Tx(tx *query.Query) *_first {
	f.tx = tx
	if tx != nil {
		f.qTx = nil
	}
	return f
}

// QueryTx 设置为手动事务
func (f *_first) QueryTx(tx *query.QueryTx) *_first {
	f.qTx = tx
	if tx != nil {
		f.tx = nil
	}
	return f
}

func (f *_first) Select(field ...field.Expr) *_first {
	f.selects = append(f.selects, field...)
	return f
}

func (f *_first) ForUpdate() *_first {
	f.lock = clause.Locking{Strength: clause.LockingStrengthUpdate}
	return f
}

func (f *_first) ForUpdateSkipLocked() *_first {
	f.lock = clause.Locking{Strength: clause.LockingStrengthUpdate, Options: clause.LockingOptionsSkipLocked}
	return f
}

func (f *_first) ForUpdateNoWait() *_first {
	f.lock = clause.Locking{Strength: clause.LockingStrengthUpdate, Options: clause.LockingOptionsNoWait}
	return f
}

func (f *_first) ForShare() *_first {
	f.lock = clause.Locking{Strength: clause.LockingStrengthShare}
	return f
}

func (f *_first) ForShareSkipLocked() *_first {
	f.lock = clause.Locking{Strength: clause.LockingStrengthShare, Options: clause.LockingOptionsSkipLocked}
	return f
}

func (f *_first) ForShareNoWait() *_first {
	f.lock = clause.Locking{Strength: clause.LockingStrengthShare, Options: clause.LockingOptionsNoWait}
	return f
}

func (f *_first) Unscoped(unscoped ...bool) *_first {
	_unscoped := true
	if len(unscoped) > 0 {
		_unscoped = unscoped[0]
	}
	f.unscoped = _unscoped
	return f
}

func (f *_first) Scopes(funcs ...func(gen.Dao) gen.Dao) *_first {
	f.scopes = append(f.scopes, funcs...)
	return f
}

func (f *_first) Relation(opts ...RelationOption) *_first {
	f.relationOpts = append(f.relationOpts, opts...)
	return f
}

func (f *_first) Where(opts ...ConditionOption) *_first {
	f.conditionOpts = append(f.conditionOpts, opts...)
	return f
}

func (f *_first) WriteDB() *_first {
	f.writeDB = true
	return f
}

// Do 执行获取第一条记录（主键升序）
func (f *_first) Do(ctx context.Context) (*models.IdentityCard, error) {
	fq := f.core.q.IdentityCard
	if f.tx != nil {
		fq = f.tx.IdentityCard
	}
	if f.qTx != nil {
		fq = f.qTx.IdentityCard
	}
	fr := fq.WithContext(ctx)
	if f.core.newTableName != nil && *f.core.newTableName != "" {
		fr = fq.Table(*f.core.newTableName).WithContext(ctx)
	}
	if _len := len(f.selects); _len > 0 {
		if f.core.newTableName == nil {
			fr = fr.Select(f.selects...)
		} else {
			fs := make([]field.Expr, 0, _len)
			for _, v := range f.selects {
				fs = append(fs, field.NewField(*f.core.newTableName, v.ColumnName().String()))
			}
			fr = fr.Select(fs...)
		}
	}
	if f.writeDB {
		fr = fr.WriteDB()
	}
	if f.unscoped {
		fr = fr.Unscoped()
	}
	if len(f.scopes) > 0 {
		fr = fr.Scopes(f.scopes...)
	}
	if (f.tx != nil || f.qTx != nil) && f.lock != nil {
		fr = fr.Clauses(f.lock)
	}
	if _len := len(f.conditionOpts); _len > 0 {
		conditions := make([]gen.Condition, 0, _len)
		for _, opt := range f.conditionOpts {
			conditions = append(conditions, opt(f.core))
		}
		if len(conditions) > 0 {
			fr = fr.Where(conditions...)
		}
	}
	if _len := len(f.relationOpts); _len > 0 {
		relations := make([]field.RelationField, 0, _len)
		for _, opt := range f.relationOpts {
			relations = append(relations, opt(f.core))
		}
		if len(relations) > 0 {
			fr = fr.Preload(relations...)
		}
	}
	res, err := fr.First()
	if err != nil {
		if repositories.IsRealErr(err) {
			f.core.logger.Error("【IdentityCard.First】失败", zap.Error(err), zap.ByteString("debug.Stack", debug.Stack()))
		}
		return nil, err
	}
	return res, nil
}
