// Code generated by github.com/gorm-gen/repository. DO NOT EDIT.
// Code generated by github.com/gorm-gen/repository. DO NOT EDIT.
// Code generated by github.com/gorm-gen/repository. DO NOT EDIT.

package user

import (
	"context"
	"runtime/debug"

	"go.uber.org/zap"
	"gorm.io/gen"
	"gorm.io/gen/field"

	"example/internal/query"

	"example/internal/repositories"
)

type _update struct {
	core          *User
	tx            *query.Query
	qTx           *query.QueryTx
	unscoped      bool
	updateOpts    []UpdateOption
	conditionOpts []ConditionOption
	scopes        []func(gen.Dao) gen.Dao
}

// Update 更新数据
func (u *User) Update() *_update {
	return &_update{
		core:          u,
		updateOpts:    make([]UpdateOption, 0),
		conditionOpts: make([]ConditionOption, 0),
		scopes:        make([]func(gen.Dao) gen.Dao, 0),
	}
}

// Tx 设置为事务
func (u *_update) Tx(tx *query.Query) *_update {
	u.tx = tx
	if tx != nil {
		u.qTx = nil
	}
	return u
}

// QueryTx 设置为手动事务
func (u *_update) QueryTx(tx *query.QueryTx) *_update {
	u.qTx = tx
	if tx != nil {
		u.tx = nil
	}
	return u
}

func (u *_update) Unscoped(unscoped ...bool) *_update {
	_unscoped := true
	if len(unscoped) > 0 {
		_unscoped = unscoped[0]
	}
	u.unscoped = _unscoped
	return u
}

func (u *_update) Scopes(funcs ...func(gen.Dao) gen.Dao) *_update {
	u.scopes = append(u.scopes, funcs...)
	return u
}

func (u *_update) Update(opts ...UpdateOption) *_update {
	u.updateOpts = append(u.updateOpts, opts...)
	return u
}

func (u *_update) Where(opts ...ConditionOption) *_update {
	u.conditionOpts = append(u.conditionOpts, opts...)
	return u
}

// Do 执行更新数据
func (u *_update) Do(ctx context.Context) (int64, error) {
	_length := len(u.updateOpts)
	if _length == 0 {
		return 0, nil
	}
	uq := u.core.q.User
	if u.tx != nil {
		uq = u.tx.User
	}
	if u.qTx != nil {
		uq = u.qTx.User
	}
	ur := uq.WithContext(ctx)
	if u.core.newTableName != nil && *u.core.newTableName != "" {
		ur = uq.Table(*u.core.newTableName).WithContext(ctx)
	}
	if u.unscoped {
		ur = ur.Unscoped()
	}
	if len(u.scopes) > 0 {
		ur = ur.Scopes(u.scopes...)
	}
	if _len := len(u.conditionOpts); _len > 0 {
		conditions := make([]gen.Condition, 0, _len)
		for _, opt := range u.conditionOpts {
			conditions = append(conditions, opt(u.core))
		}
		if len(conditions) > 0 {
			ur = ur.Where(conditions...)
		}
	}
	columns := make([]field.AssignExpr, 0, _length)
	for _, opt := range u.updateOpts {
		columns = append(columns, opt(u.core))
	}
	if len(columns) == 0 {
		return 0, nil
	}
	res, err := ur.UpdateSimple(columns...)
	if err != nil {
		if repositories.IsRealErr(err) {
			u.core.logger.Error("【User.Update】失败", zap.Error(err), zap.ByteString("debug.Stack", debug.Stack()))
		}
		return 0, err
	}
	return res.RowsAffected, nil
}
