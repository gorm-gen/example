// Code generated by github.com/gorm-gen/repository. DO NOT EDIT.
// Code generated by github.com/gorm-gen/repository. DO NOT EDIT.
// Code generated by github.com/gorm-gen/repository. DO NOT EDIT.

package language

import (
	"context"
	"runtime/debug"

	"go.uber.org/zap"
	"gorm.io/gen"

	"example/internal/query"

	"example/internal/repositories"

	"example/internal/models"
)

type _create struct {
	core      *Language
	tx        *query.Query
	qTx       *query.QueryTx
	unscoped  bool
	values    []*models.Language
	batchSize int
	scopes    []func(gen.Dao) gen.Dao
}

// Create 添加数据
func (l *Language) Create() *_create {
	return &_create{
		core:     l,
		unscoped: l.unscoped,
		values:   make([]*models.Language, 0),
		scopes:   make([]func(gen.Dao) gen.Dao, 0),
	}
}

// Tx 设置为事务
func (c *_create) Tx(tx *query.Query) *_create {
	c.tx = tx
	if tx != nil {
		c.qTx = nil
	}
	return c
}

// QueryTx 设置为手动事务
func (c *_create) QueryTx(tx *query.QueryTx) *_create {
	c.qTx = tx
	if tx != nil {
		c.tx = nil
	}
	return c
}

func (c *_create) Unscoped(unscoped ...bool) *_create {
	_unscoped := true
	if len(unscoped) > 0 {
		_unscoped = unscoped[0]
	}
	c.unscoped = _unscoped
	return c
}

func (c *_create) Scopes(funcs ...func(gen.Dao) gen.Dao) *_create {
	c.scopes = append(c.scopes, funcs...)
	return c
}

func (c *_create) Values(values ...*models.Language) *_create {
	c.values = append(c.values, values...)
	return c
}

// BatchSize 当批量插入时指定创建的数量
func (c *_create) BatchSize(batchSize uint) *_create {
	c.batchSize = int(batchSize)
	return c
}

// Do 执行添加数据
func (c *_create) Do(ctx context.Context) (err error) {
	length := len(c.values)
	if length == 0 {
		return nil
	}
	cq := c.core.q.Language
	if c.tx != nil {
		cq = c.tx.Language
	}
	if c.qTx != nil {
		cq = c.qTx.Language
	}
	cr := cq.WithContext(ctx)
	if c.core.newTableName != nil && *c.core.newTableName != "" {
		cr = cq.Table(*c.core.newTableName).WithContext(ctx)
	}
	if c.unscoped {
		cr = cr.Unscoped()
	}
	if len(c.scopes) > 0 {
		cr = cr.Scopes(c.scopes...)
	}
	if length > 1 && c.batchSize > 0 {
		err = cr.CreateInBatches(c.values, c.batchSize)
	} else {
		err = cr.Create(c.values...)
	}
	if err != nil {
		if repositories.IsRealErr(err) {
			c.core.logger.Error("【Language.Create】失败", zap.Error(err), zap.ByteString("debug.Stack", debug.Stack()))
		}
		return err
	}
	return nil
}
