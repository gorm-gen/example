// Code generated by github.com/gorm-gen/repository. DO NOT EDIT.
// Code generated by github.com/gorm-gen/repository. DO NOT EDIT.
// Code generated by github.com/gorm-gen/repository. DO NOT EDIT.

package company

import (
	"strings"
	"time"

	f "github.com/gorm-gen/field"
	"github.com/shopspring/decimal"
	"go.uber.org/zap"
	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gorm"

	"example/internal/global"

	"example/internal/query"

	"example/internal/repositories"
)

// Company 仓库/Repository
type Company struct {
	q            *query.Query
	db           *gorm.DB
	logger       *zap.Logger
	newTableName *string
}

// Option Company仓库初始化选项
type Option func(*Company)

func WithQuery(q *query.Query) Option {
	return func(c *Company) {
		c.q = q
	}
}

func WithLogger(logger *zap.Logger) Option {
	return func(c *Company) {
		c.logger = logger
	}
}

func WithDB(db *gorm.DB) Option {
	return func(c *Company) {
		c.db = db
	}
}

func WithNewTableName(newTableName string) Option {
	return func(c *Company) {
		c.newTableName = &newTableName
	}
}

// New Company仓库初始化
func New(opts ...Option) *Company {
	c := &Company{
		q:      repositories.GetQuery(),
		db:     global.DB,
		logger: global.Logger,
	}
	for _, opt := range opts {
		opt(c)
	}
	return c
}

// ConditionOption 字段条件筛选选项
type ConditionOption func(*Company) gen.Condition

// Condition 自定义字段条件筛选
func Condition(condition gen.Condition) ConditionOption {
	return func(*Company) gen.Condition {
		return condition
	}
}

func ConditionID(v ...int) ConditionOption {
	return func(c *Company) gen.Condition {
		length := len(v)
		if c.newTableName != nil {
			if length == 0 {
				return c.q.Company.Table(*c.newTableName).ID.Eq(0)
			}
			if length == 1 {
				return c.q.Company.Table(*c.newTableName).ID.Eq(v[0])
			}
			return c.q.Company.Table(*c.newTableName).ID.In(v...)
		}
		if length == 0 {
			return c.q.Company.ID.Eq(0)
		}
		if length == 1 {
			return c.q.Company.ID.Eq(v[0])
		}
		return c.q.Company.ID.In(v...)
	}
}

func ConditionIDNot(v ...int) ConditionOption {
	return func(c *Company) gen.Condition {
		length := len(v)
		if c.newTableName != nil {
			if length == 0 {
				return c.q.Company.Table(*c.newTableName).ID.Neq(0)
			}
			if length == 1 {
				return c.q.Company.Table(*c.newTableName).ID.Neq(v[0])
			}
			return c.q.Company.Table(*c.newTableName).ID.NotIn(v...)
		}
		if length == 0 {
			return c.q.Company.ID.Neq(0)
		}
		if length == 1 {
			return c.q.Company.ID.Neq(v[0])
		}
		return c.q.Company.ID.NotIn(v...)
	}
}

func ConditionIDGt(v ...int) ConditionOption {
	return func(c *Company) gen.Condition {
		if c.newTableName != nil {
			if len(v) == 0 {
				return c.q.Company.Table(*c.newTableName).ID.Gt(0)
			}
			return c.q.Company.Table(*c.newTableName).ID.Gt(v[0])
		}
		if len(v) == 0 {
			return c.q.Company.ID.Gt(0)
		}
		return c.q.Company.ID.Gt(v[0])
	}
}

func ConditionIDGte(v ...int) ConditionOption {
	return func(c *Company) gen.Condition {
		if c.newTableName != nil {
			if len(v) == 0 {
				return c.q.Company.Table(*c.newTableName).ID.Gte(0)
			}
			return c.q.Company.Table(*c.newTableName).ID.Gte(v[0])
		}
		if len(v) == 0 {
			return c.q.Company.ID.Gte(0)
		}
		return c.q.Company.ID.Gte(v[0])
	}
}

func ConditionIDLt(v ...int) ConditionOption {
	return func(c *Company) gen.Condition {
		if c.newTableName != nil {
			if len(v) == 0 {
				return c.q.Company.Table(*c.newTableName).ID.Lt(0)
			}
			return c.q.Company.Table(*c.newTableName).ID.Lt(v[0])
		}
		if len(v) == 0 {
			return c.q.Company.ID.Lt(0)
		}
		return c.q.Company.ID.Lt(v[0])
	}
}

func ConditionIDLte(v ...int) ConditionOption {
	return func(c *Company) gen.Condition {
		if c.newTableName != nil {
			if len(v) == 0 {
				return c.q.Company.Table(*c.newTableName).ID.Lte(0)
			}
			return c.q.Company.Table(*c.newTableName).ID.Lte(v[0])
		}
		if len(v) == 0 {
			return c.q.Company.ID.Lte(0)
		}
		return c.q.Company.ID.Lte(v[0])
	}
}

func ConditionIDBetween(left, right int) ConditionOption {
	return func(c *Company) gen.Condition {
		if c.newTableName != nil {
			return c.q.Company.Table(*c.newTableName).ID.Between(left, right)
		}
		return c.q.Company.ID.Between(left, right)
	}
}

func ConditionIDNotBetween(left, right int) ConditionOption {
	return func(c *Company) gen.Condition {
		if c.newTableName != nil {
			return c.q.Company.Table(*c.newTableName).ID.NotBetween(left, right)
		}
		return c.q.Company.ID.NotBetween(left, right)
	}
}

func ConditionName(v ...string) ConditionOption {
	return func(c *Company) gen.Condition {
		length := len(v)
		if c.newTableName != nil {
			if length == 0 {
				return c.q.Company.Table(*c.newTableName).Name.Eq("")
			}
			return c.q.Company.Table(*c.newTableName).Name.Eq(v[0])
		}
		if length == 0 {
			return c.q.Company.Name.Eq("")
		}
		return c.q.Company.Name.Eq(v[0])
	}
}

func ConditionNameNeq(v ...string) ConditionOption {
	return func(c *Company) gen.Condition {
		length := len(v)
		if c.newTableName != nil {
			if length == 0 {
				return c.q.Company.Table(*c.newTableName).Name.Neq("")
			}
			return c.q.Company.Table(*c.newTableName).Name.Neq(v[0])
		}
		if length == 0 {
			return c.q.Company.Name.Neq("")
		}
		return c.q.Company.Name.Neq(v[0])
	}
}

func ConditionNameLike(v string) ConditionOption {
	return func(c *Company) gen.Condition {
		if !strings.Contains(v, "%") {
			v = "%" + v + "%"
		}
		if c.newTableName != nil {
			return c.q.Company.Table(*c.newTableName).Name.Like(v)
		}
		return c.q.Company.Name.Like(v)
	}
}

func ConditionNameNotLike(v string) ConditionOption {
	return func(c *Company) gen.Condition {
		if !strings.Contains(v, "%") {
			v = "%" + v + "%"
		}
		if c.newTableName != nil {
			return c.q.Company.Table(*c.newTableName).Name.NotLike(v)
		}
		return c.q.Company.Name.NotLike(v)
	}
}

func ConditionCreatedAt(v ...time.Time) ConditionOption {
	return func(c *Company) gen.Condition {
		if c.newTableName != nil {
			if len(v) > 0 && !v[0].IsZero() {
				return c.q.Company.Table(*c.newTableName).CreatedAt.Eq(v[0])
			}
			return c.q.Company.Table(*c.newTableName).CreatedAt.Eq(time.Now())
		}
		if len(v) > 0 && !v[0].IsZero() {
			return c.q.Company.CreatedAt.Eq(v[0])
		}
		return c.q.Company.CreatedAt.Eq(time.Now())
	}
}

func ConditionCreatedAtNeq(v ...time.Time) ConditionOption {
	return func(c *Company) gen.Condition {
		if c.newTableName != nil {
			if len(v) > 0 && !v[0].IsZero() {
				return c.q.Company.Table(*c.newTableName).CreatedAt.Neq(v[0])
			}
			return c.q.Company.Table(*c.newTableName).CreatedAt.Neq(time.Now())
		}
		if len(v) > 0 && !v[0].IsZero() {
			return c.q.Company.CreatedAt.Neq(v[0])
		}
		return c.q.Company.CreatedAt.Neq(time.Now())
	}
}

func ConditionCreatedAtGt(v ...time.Time) ConditionOption {
	return func(c *Company) gen.Condition {
		if c.newTableName != nil {
			if len(v) > 0 && !v[0].IsZero() {
				return c.q.Company.Table(*c.newTableName).CreatedAt.Gt(v[0])
			}
			return c.q.Company.Table(*c.newTableName).CreatedAt.Gt(time.Now())
		}
		if len(v) > 0 && !v[0].IsZero() {
			return c.q.Company.CreatedAt.Gt(v[0])
		}
		return c.q.Company.CreatedAt.Gt(time.Now())
	}
}

func ConditionCreatedAtGte(v ...time.Time) ConditionOption {
	return func(c *Company) gen.Condition {
		if c.newTableName != nil {
			if len(v) > 0 && !v[0].IsZero() {
				return c.q.Company.Table(*c.newTableName).CreatedAt.Gte(v[0])
			}
			return c.q.Company.Table(*c.newTableName).CreatedAt.Gte(time.Now())
		}
		if len(v) > 0 && !v[0].IsZero() {
			return c.q.Company.CreatedAt.Gte(v[0])
		}
		return c.q.Company.CreatedAt.Gte(time.Now())
	}
}

func ConditionCreatedAtLt(v ...time.Time) ConditionOption {
	return func(c *Company) gen.Condition {
		if c.newTableName != nil {
			if len(v) > 0 && !v[0].IsZero() {
				return c.q.Company.Table(*c.newTableName).CreatedAt.Lt(v[0])
			}
			return c.q.Company.Table(*c.newTableName).CreatedAt.Lt(time.Now())
		}
		if len(v) > 0 && !v[0].IsZero() {
			return c.q.Company.CreatedAt.Lt(v[0])
		}
		return c.q.Company.CreatedAt.Lt(time.Now())
	}
}

func ConditionCreatedAtLte(v ...time.Time) ConditionOption {
	return func(c *Company) gen.Condition {
		if c.newTableName != nil {
			if len(v) > 0 && !v[0].IsZero() {
				return c.q.Company.Table(*c.newTableName).CreatedAt.Lte(v[0])
			}
			return c.q.Company.Table(*c.newTableName).CreatedAt.Lte(time.Now())
		}
		if len(v) > 0 && !v[0].IsZero() {
			return c.q.Company.CreatedAt.Lte(v[0])
		}
		return c.q.Company.CreatedAt.Lte(time.Now())
	}
}

func ConditionCreatedAtBetween(left, right time.Time) ConditionOption {
	return func(c *Company) gen.Condition {
		if c.newTableName != nil {
			return c.q.Company.Table(*c.newTableName).CreatedAt.Between(left, right)
		}
		return c.q.Company.CreatedAt.Between(left, right)
	}
}

func ConditionCreatedAtNotBetween(left, right time.Time) ConditionOption {
	return func(c *Company) gen.Condition {
		if c.newTableName != nil {
			return c.q.Company.Table(*c.newTableName).CreatedAt.NotBetween(left, right)
		}
		return c.q.Company.CreatedAt.NotBetween(left, right)
	}
}

func ConditionUpdatedAt(v ...time.Time) ConditionOption {
	return func(c *Company) gen.Condition {
		if c.newTableName != nil {
			if len(v) > 0 && !v[0].IsZero() {
				return c.q.Company.Table(*c.newTableName).UpdatedAt.Eq(v[0])
			}
			return c.q.Company.Table(*c.newTableName).UpdatedAt.Eq(time.Now())
		}
		if len(v) > 0 && !v[0].IsZero() {
			return c.q.Company.UpdatedAt.Eq(v[0])
		}
		return c.q.Company.UpdatedAt.Eq(time.Now())
	}
}

func ConditionUpdatedAtNeq(v ...time.Time) ConditionOption {
	return func(c *Company) gen.Condition {
		if c.newTableName != nil {
			if len(v) > 0 && !v[0].IsZero() {
				return c.q.Company.Table(*c.newTableName).UpdatedAt.Neq(v[0])
			}
			return c.q.Company.Table(*c.newTableName).UpdatedAt.Neq(time.Now())
		}
		if len(v) > 0 && !v[0].IsZero() {
			return c.q.Company.UpdatedAt.Neq(v[0])
		}
		return c.q.Company.UpdatedAt.Neq(time.Now())
	}
}

func ConditionUpdatedAtGt(v ...time.Time) ConditionOption {
	return func(c *Company) gen.Condition {
		if c.newTableName != nil {
			if len(v) > 0 && !v[0].IsZero() {
				return c.q.Company.Table(*c.newTableName).UpdatedAt.Gt(v[0])
			}
			return c.q.Company.Table(*c.newTableName).UpdatedAt.Gt(time.Now())
		}
		if len(v) > 0 && !v[0].IsZero() {
			return c.q.Company.UpdatedAt.Gt(v[0])
		}
		return c.q.Company.UpdatedAt.Gt(time.Now())
	}
}

func ConditionUpdatedAtGte(v ...time.Time) ConditionOption {
	return func(c *Company) gen.Condition {
		if c.newTableName != nil {
			if len(v) > 0 && !v[0].IsZero() {
				return c.q.Company.Table(*c.newTableName).UpdatedAt.Gte(v[0])
			}
			return c.q.Company.Table(*c.newTableName).UpdatedAt.Gte(time.Now())
		}
		if len(v) > 0 && !v[0].IsZero() {
			return c.q.Company.UpdatedAt.Gte(v[0])
		}
		return c.q.Company.UpdatedAt.Gte(time.Now())
	}
}

func ConditionUpdatedAtLt(v ...time.Time) ConditionOption {
	return func(c *Company) gen.Condition {
		if c.newTableName != nil {
			if len(v) > 0 && !v[0].IsZero() {
				return c.q.Company.Table(*c.newTableName).UpdatedAt.Lt(v[0])
			}
			return c.q.Company.Table(*c.newTableName).UpdatedAt.Lt(time.Now())
		}
		if len(v) > 0 && !v[0].IsZero() {
			return c.q.Company.UpdatedAt.Lt(v[0])
		}
		return c.q.Company.UpdatedAt.Lt(time.Now())
	}
}

func ConditionUpdatedAtLte(v ...time.Time) ConditionOption {
	return func(c *Company) gen.Condition {
		if c.newTableName != nil {
			if len(v) > 0 && !v[0].IsZero() {
				return c.q.Company.Table(*c.newTableName).UpdatedAt.Lte(v[0])
			}
			return c.q.Company.Table(*c.newTableName).UpdatedAt.Lte(time.Now())
		}
		if len(v) > 0 && !v[0].IsZero() {
			return c.q.Company.UpdatedAt.Lte(v[0])
		}
		return c.q.Company.UpdatedAt.Lte(time.Now())
	}
}

func ConditionUpdatedAtBetween(left, right time.Time) ConditionOption {
	return func(c *Company) gen.Condition {
		if c.newTableName != nil {
			return c.q.Company.Table(*c.newTableName).UpdatedAt.Between(left, right)
		}
		return c.q.Company.UpdatedAt.Between(left, right)
	}
}

func ConditionUpdatedAtNotBetween(left, right time.Time) ConditionOption {
	return func(c *Company) gen.Condition {
		if c.newTableName != nil {
			return c.q.Company.Table(*c.newTableName).UpdatedAt.NotBetween(left, right)
		}
		return c.q.Company.UpdatedAt.NotBetween(left, right)
	}
}

func ConditionDeletedAtIsZero() ConditionOption {
	return func(c *Company) gen.Condition {
		if c.newTableName != nil {
			return f.NewDecimal(c.q.Company.DeletedAt, f.WithTableName(*c.newTableName)).Eq(decimal.Zero)
		}
		return f.NewDecimal(c.q.Company.DeletedAt).Eq(decimal.Zero)
	}
}

func ConditionDeletedAtGtZero() ConditionOption {
	return func(c *Company) gen.Condition {
		if c.newTableName != nil {
			return f.NewDecimal(c.q.Company.DeletedAt, f.WithTableName(*c.newTableName)).Gt(decimal.Zero)
		}
		return f.NewDecimal(c.q.Company.DeletedAt).Gt(decimal.Zero)
	}
}

// UpdateOption 数据更新选项
type UpdateOption func(*Company) field.AssignExpr

// Update 自定义数据更新
func Update(update field.AssignExpr) UpdateOption {
	return func(*Company) field.AssignExpr {
		return update
	}
}

func UpdateName(v string) UpdateOption {
	return func(c *Company) field.AssignExpr {
		if c.newTableName != nil {
			return c.q.Company.Table(*c.newTableName).Name.Value(v)
		}
		return c.q.Company.Name.Value(v)
	}
}

func UpdateCreatedAt(v time.Time) UpdateOption {
	return func(c *Company) field.AssignExpr {
		if c.newTableName != nil {
			return c.q.Company.Table(*c.newTableName).CreatedAt.Value(v)
		}
		return c.q.Company.CreatedAt.Value(v)
	}
}

func UpdateUpdatedAt(v time.Time) UpdateOption {
	return func(c *Company) field.AssignExpr {
		if c.newTableName != nil {
			return c.q.Company.Table(*c.newTableName).UpdatedAt.Value(v)
		}
		return c.q.Company.UpdatedAt.Value(v)
	}
}

// OrderOption 数据排序选项
type OrderOption func(*Company) field.Expr

// Order 自定义数据排序
func OrderBy(order field.Expr) OrderOption {
	return func(*Company) field.Expr {
		return order
	}
}

func OrderIDAsc() OrderOption {
	return func(c *Company) field.Expr {
		if c.newTableName != nil {
			return c.q.Company.Table(*c.newTableName).ID.Asc()
		}
		return c.q.Company.ID.Asc()
	}
}

func OrderIDDesc() OrderOption {
	return func(c *Company) field.Expr {
		if c.newTableName != nil {
			return c.q.Company.Table(*c.newTableName).ID.Desc()
		}
		return c.q.Company.ID.Desc()
	}
}

func OrderCreatedAtAsc() OrderOption {
	return func(c *Company) field.Expr {
		if c.newTableName != nil {
			return c.q.Company.Table(*c.newTableName).CreatedAt.Asc()
		}
		return c.q.Company.CreatedAt.Asc()
	}
}

func OrderCreatedAtDesc() OrderOption {
	return func(c *Company) field.Expr {
		if c.newTableName != nil {
			return c.q.Company.Table(*c.newTableName).CreatedAt.Desc()
		}
		return c.q.Company.CreatedAt.Desc()
	}
}

func OrderUpdatedAtAsc() OrderOption {
	return func(c *Company) field.Expr {
		if c.newTableName != nil {
			return c.q.Company.Table(*c.newTableName).UpdatedAt.Asc()
		}
		return c.q.Company.UpdatedAt.Asc()
	}
}

func OrderUpdatedAtDesc() OrderOption {
	return func(c *Company) field.Expr {
		if c.newTableName != nil {
			return c.q.Company.Table(*c.newTableName).UpdatedAt.Desc()
		}
		return c.q.Company.UpdatedAt.Desc()
	}
}

// RelationOption 关联模型预加载选项
type RelationOption func(*Company) field.RelationField

// Relation 自定义关联模型预加载
func Relation(relation field.RelationField) RelationOption {
	return func(*Company) field.RelationField {
		return relation
	}
}

func RelationAll() RelationOption {
	return func(*Company) field.RelationField {
		return field.Associations
	}
}
