// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"example/internal/models"
)

func newIdentityCard(db *gorm.DB, opts ...gen.DOOption) identityCard {
	_identityCard := identityCard{}

	_identityCard.identityCardDo.UseDB(db, opts...)
	_identityCard.identityCardDo.UseModel(&models.IdentityCard{})

	tableName := _identityCard.identityCardDo.TableName()
	_identityCard.ALL = field.NewAsterisk(tableName)
	_identityCard.ID = field.NewInt(tableName, "id")
	_identityCard.Number = field.NewString(tableName, "number")
	_identityCard.UserID = field.NewInt(tableName, "user_id")
	_identityCard.CreatedAt = field.NewTime(tableName, "created_at")
	_identityCard.UpdatedAt = field.NewTime(tableName, "updated_at")
	_identityCard.DeletedAt = field.NewField(tableName, "deleted_at")

	_identityCard.fillFieldMap()

	return _identityCard
}

// identityCard 身份证
type identityCard struct {
	identityCardDo

	ALL       field.Asterisk
	ID        field.Int    // 记录ID
	Number    field.String // 身份证号码
	UserID    field.Int    // 用户ID
	CreatedAt field.Time   // 创建日期
	UpdatedAt field.Time   // 更新日期
	DeletedAt field.Field  // 删除时间戳[0:未删除,非0:删除时间戳]

	fieldMap map[string]field.Expr
}

func (i identityCard) Table(newTableName string) *identityCard {
	i.identityCardDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i identityCard) As(alias string) *identityCard {
	i.identityCardDo.DO = *(i.identityCardDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *identityCard) updateTableName(table string) *identityCard {
	i.ALL = field.NewAsterisk(table)
	i.ID = field.NewInt(table, "id")
	i.Number = field.NewString(table, "number")
	i.UserID = field.NewInt(table, "user_id")
	i.CreatedAt = field.NewTime(table, "created_at")
	i.UpdatedAt = field.NewTime(table, "updated_at")
	i.DeletedAt = field.NewField(table, "deleted_at")

	i.fillFieldMap()

	return i
}

func (i *identityCard) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *identityCard) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 6)
	i.fieldMap["id"] = i.ID
	i.fieldMap["number"] = i.Number
	i.fieldMap["user_id"] = i.UserID
	i.fieldMap["created_at"] = i.CreatedAt
	i.fieldMap["updated_at"] = i.UpdatedAt
	i.fieldMap["deleted_at"] = i.DeletedAt
}

func (i identityCard) clone(db *gorm.DB) identityCard {
	i.identityCardDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i identityCard) replaceDB(db *gorm.DB) identityCard {
	i.identityCardDo.ReplaceDB(db)
	return i
}

type identityCardDo struct{ gen.DO }

type IIdentityCardDo interface {
	gen.SubQuery
	Debug() IIdentityCardDo
	WithContext(ctx context.Context) IIdentityCardDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IIdentityCardDo
	WriteDB() IIdentityCardDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IIdentityCardDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IIdentityCardDo
	Not(conds ...gen.Condition) IIdentityCardDo
	Or(conds ...gen.Condition) IIdentityCardDo
	Select(conds ...field.Expr) IIdentityCardDo
	Where(conds ...gen.Condition) IIdentityCardDo
	Order(conds ...field.Expr) IIdentityCardDo
	Distinct(cols ...field.Expr) IIdentityCardDo
	Omit(cols ...field.Expr) IIdentityCardDo
	Join(table schema.Tabler, on ...field.Expr) IIdentityCardDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IIdentityCardDo
	RightJoin(table schema.Tabler, on ...field.Expr) IIdentityCardDo
	Group(cols ...field.Expr) IIdentityCardDo
	Having(conds ...gen.Condition) IIdentityCardDo
	Limit(limit int) IIdentityCardDo
	Offset(offset int) IIdentityCardDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IIdentityCardDo
	Unscoped() IIdentityCardDo
	Create(values ...*models.IdentityCard) error
	CreateInBatches(values []*models.IdentityCard, batchSize int) error
	Save(values ...*models.IdentityCard) error
	First() (*models.IdentityCard, error)
	Take() (*models.IdentityCard, error)
	Last() (*models.IdentityCard, error)
	Find() ([]*models.IdentityCard, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.IdentityCard, err error)
	FindInBatches(result *[]*models.IdentityCard, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.IdentityCard) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IIdentityCardDo
	Assign(attrs ...field.AssignExpr) IIdentityCardDo
	Joins(fields ...field.RelationField) IIdentityCardDo
	Preload(fields ...field.RelationField) IIdentityCardDo
	FirstOrInit() (*models.IdentityCard, error)
	FirstOrCreate() (*models.IdentityCard, error)
	FindByPage(offset int, limit int) (result []*models.IdentityCard, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IIdentityCardDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (i identityCardDo) Debug() IIdentityCardDo {
	return i.withDO(i.DO.Debug())
}

func (i identityCardDo) WithContext(ctx context.Context) IIdentityCardDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i identityCardDo) ReadDB() IIdentityCardDo {
	return i.Clauses(dbresolver.Read)
}

func (i identityCardDo) WriteDB() IIdentityCardDo {
	return i.Clauses(dbresolver.Write)
}

func (i identityCardDo) Session(config *gorm.Session) IIdentityCardDo {
	return i.withDO(i.DO.Session(config))
}

func (i identityCardDo) Clauses(conds ...clause.Expression) IIdentityCardDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i identityCardDo) Returning(value interface{}, columns ...string) IIdentityCardDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i identityCardDo) Not(conds ...gen.Condition) IIdentityCardDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i identityCardDo) Or(conds ...gen.Condition) IIdentityCardDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i identityCardDo) Select(conds ...field.Expr) IIdentityCardDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i identityCardDo) Where(conds ...gen.Condition) IIdentityCardDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i identityCardDo) Order(conds ...field.Expr) IIdentityCardDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i identityCardDo) Distinct(cols ...field.Expr) IIdentityCardDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i identityCardDo) Omit(cols ...field.Expr) IIdentityCardDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i identityCardDo) Join(table schema.Tabler, on ...field.Expr) IIdentityCardDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i identityCardDo) LeftJoin(table schema.Tabler, on ...field.Expr) IIdentityCardDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i identityCardDo) RightJoin(table schema.Tabler, on ...field.Expr) IIdentityCardDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i identityCardDo) Group(cols ...field.Expr) IIdentityCardDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i identityCardDo) Having(conds ...gen.Condition) IIdentityCardDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i identityCardDo) Limit(limit int) IIdentityCardDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i identityCardDo) Offset(offset int) IIdentityCardDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i identityCardDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IIdentityCardDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i identityCardDo) Unscoped() IIdentityCardDo {
	return i.withDO(i.DO.Unscoped())
}

func (i identityCardDo) Create(values ...*models.IdentityCard) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i identityCardDo) CreateInBatches(values []*models.IdentityCard, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i identityCardDo) Save(values ...*models.IdentityCard) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i identityCardDo) First() (*models.IdentityCard, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.IdentityCard), nil
	}
}

func (i identityCardDo) Take() (*models.IdentityCard, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.IdentityCard), nil
	}
}

func (i identityCardDo) Last() (*models.IdentityCard, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.IdentityCard), nil
	}
}

func (i identityCardDo) Find() ([]*models.IdentityCard, error) {
	result, err := i.DO.Find()
	return result.([]*models.IdentityCard), err
}

func (i identityCardDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.IdentityCard, err error) {
	buf := make([]*models.IdentityCard, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i identityCardDo) FindInBatches(result *[]*models.IdentityCard, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i identityCardDo) Attrs(attrs ...field.AssignExpr) IIdentityCardDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i identityCardDo) Assign(attrs ...field.AssignExpr) IIdentityCardDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i identityCardDo) Joins(fields ...field.RelationField) IIdentityCardDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i identityCardDo) Preload(fields ...field.RelationField) IIdentityCardDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i identityCardDo) FirstOrInit() (*models.IdentityCard, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.IdentityCard), nil
	}
}

func (i identityCardDo) FirstOrCreate() (*models.IdentityCard, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.IdentityCard), nil
	}
}

func (i identityCardDo) FindByPage(offset int, limit int) (result []*models.IdentityCard, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i identityCardDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i identityCardDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i identityCardDo) Delete(models ...*models.IdentityCard) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *identityCardDo) withDO(do gen.Dao) *identityCardDo {
	i.DO = *do.(*gen.DO)
	return i
}
