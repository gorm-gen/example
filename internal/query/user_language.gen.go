// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"example/internal/models"
)

func newUserLanguage(db *gorm.DB, opts ...gen.DOOption) userLanguage {
	_userLanguage := userLanguage{}

	_userLanguage.userLanguageDo.UseDB(db, opts...)
	_userLanguage.userLanguageDo.UseModel(&models.UserLanguage{})

	tableName := _userLanguage.userLanguageDo.TableName()
	_userLanguage.ALL = field.NewAsterisk(tableName)
	_userLanguage.ID = field.NewInt(tableName, "id")
	_userLanguage.UserID = field.NewInt(tableName, "user_id")
	_userLanguage.LanguageID = field.NewInt(tableName, "language_id")
	_userLanguage.CreatedAt = field.NewTime(tableName, "created_at")
	_userLanguage.UpdatedAt = field.NewTime(tableName, "updated_at")
	_userLanguage.DeletedAt = field.NewField(tableName, "deleted_at")

	_userLanguage.fillFieldMap()

	return _userLanguage
}

// userLanguage 用户语言表
type userLanguage struct {
	userLanguageDo

	ALL        field.Asterisk
	ID         field.Int   // 记录ID
	UserID     field.Int   // 用户ID
	LanguageID field.Int   // 语言ID
	CreatedAt  field.Time  // 创建日期
	UpdatedAt  field.Time  // 更新日期
	DeletedAt  field.Field // 删除时间戳[0:未删除,非0:删除时间戳]

	fieldMap map[string]field.Expr
}

func (u userLanguage) Table(newTableName string) *userLanguage {
	u.userLanguageDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userLanguage) As(alias string) *userLanguage {
	u.userLanguageDo.DO = *(u.userLanguageDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userLanguage) updateTableName(table string) *userLanguage {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt(table, "id")
	u.UserID = field.NewInt(table, "user_id")
	u.LanguageID = field.NewInt(table, "language_id")
	u.CreatedAt = field.NewTime(table, "created_at")
	u.UpdatedAt = field.NewTime(table, "updated_at")
	u.DeletedAt = field.NewField(table, "deleted_at")

	u.fillFieldMap()

	return u
}

func (u *userLanguage) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userLanguage) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 6)
	u.fieldMap["id"] = u.ID
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["language_id"] = u.LanguageID
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
	u.fieldMap["deleted_at"] = u.DeletedAt
}

func (u userLanguage) clone(db *gorm.DB) userLanguage {
	u.userLanguageDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userLanguage) replaceDB(db *gorm.DB) userLanguage {
	u.userLanguageDo.ReplaceDB(db)
	return u
}

type userLanguageDo struct{ gen.DO }

type IUserLanguageDo interface {
	gen.SubQuery
	Debug() IUserLanguageDo
	WithContext(ctx context.Context) IUserLanguageDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserLanguageDo
	WriteDB() IUserLanguageDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserLanguageDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserLanguageDo
	Not(conds ...gen.Condition) IUserLanguageDo
	Or(conds ...gen.Condition) IUserLanguageDo
	Select(conds ...field.Expr) IUserLanguageDo
	Where(conds ...gen.Condition) IUserLanguageDo
	Order(conds ...field.Expr) IUserLanguageDo
	Distinct(cols ...field.Expr) IUserLanguageDo
	Omit(cols ...field.Expr) IUserLanguageDo
	Join(table schema.Tabler, on ...field.Expr) IUserLanguageDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserLanguageDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserLanguageDo
	Group(cols ...field.Expr) IUserLanguageDo
	Having(conds ...gen.Condition) IUserLanguageDo
	Limit(limit int) IUserLanguageDo
	Offset(offset int) IUserLanguageDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserLanguageDo
	Unscoped() IUserLanguageDo
	Create(values ...*models.UserLanguage) error
	CreateInBatches(values []*models.UserLanguage, batchSize int) error
	Save(values ...*models.UserLanguage) error
	First() (*models.UserLanguage, error)
	Take() (*models.UserLanguage, error)
	Last() (*models.UserLanguage, error)
	Find() ([]*models.UserLanguage, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.UserLanguage, err error)
	FindInBatches(result *[]*models.UserLanguage, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.UserLanguage) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserLanguageDo
	Assign(attrs ...field.AssignExpr) IUserLanguageDo
	Joins(fields ...field.RelationField) IUserLanguageDo
	Preload(fields ...field.RelationField) IUserLanguageDo
	FirstOrInit() (*models.UserLanguage, error)
	FirstOrCreate() (*models.UserLanguage, error)
	FindByPage(offset int, limit int) (result []*models.UserLanguage, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserLanguageDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userLanguageDo) Debug() IUserLanguageDo {
	return u.withDO(u.DO.Debug())
}

func (u userLanguageDo) WithContext(ctx context.Context) IUserLanguageDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userLanguageDo) ReadDB() IUserLanguageDo {
	return u.Clauses(dbresolver.Read)
}

func (u userLanguageDo) WriteDB() IUserLanguageDo {
	return u.Clauses(dbresolver.Write)
}

func (u userLanguageDo) Session(config *gorm.Session) IUserLanguageDo {
	return u.withDO(u.DO.Session(config))
}

func (u userLanguageDo) Clauses(conds ...clause.Expression) IUserLanguageDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userLanguageDo) Returning(value interface{}, columns ...string) IUserLanguageDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userLanguageDo) Not(conds ...gen.Condition) IUserLanguageDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userLanguageDo) Or(conds ...gen.Condition) IUserLanguageDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userLanguageDo) Select(conds ...field.Expr) IUserLanguageDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userLanguageDo) Where(conds ...gen.Condition) IUserLanguageDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userLanguageDo) Order(conds ...field.Expr) IUserLanguageDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userLanguageDo) Distinct(cols ...field.Expr) IUserLanguageDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userLanguageDo) Omit(cols ...field.Expr) IUserLanguageDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userLanguageDo) Join(table schema.Tabler, on ...field.Expr) IUserLanguageDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userLanguageDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserLanguageDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userLanguageDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserLanguageDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userLanguageDo) Group(cols ...field.Expr) IUserLanguageDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userLanguageDo) Having(conds ...gen.Condition) IUserLanguageDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userLanguageDo) Limit(limit int) IUserLanguageDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userLanguageDo) Offset(offset int) IUserLanguageDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userLanguageDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserLanguageDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userLanguageDo) Unscoped() IUserLanguageDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userLanguageDo) Create(values ...*models.UserLanguage) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userLanguageDo) CreateInBatches(values []*models.UserLanguage, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userLanguageDo) Save(values ...*models.UserLanguage) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userLanguageDo) First() (*models.UserLanguage, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.UserLanguage), nil
	}
}

func (u userLanguageDo) Take() (*models.UserLanguage, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.UserLanguage), nil
	}
}

func (u userLanguageDo) Last() (*models.UserLanguage, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.UserLanguage), nil
	}
}

func (u userLanguageDo) Find() ([]*models.UserLanguage, error) {
	result, err := u.DO.Find()
	return result.([]*models.UserLanguage), err
}

func (u userLanguageDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.UserLanguage, err error) {
	buf := make([]*models.UserLanguage, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userLanguageDo) FindInBatches(result *[]*models.UserLanguage, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userLanguageDo) Attrs(attrs ...field.AssignExpr) IUserLanguageDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userLanguageDo) Assign(attrs ...field.AssignExpr) IUserLanguageDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userLanguageDo) Joins(fields ...field.RelationField) IUserLanguageDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userLanguageDo) Preload(fields ...field.RelationField) IUserLanguageDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userLanguageDo) FirstOrInit() (*models.UserLanguage, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.UserLanguage), nil
	}
}

func (u userLanguageDo) FirstOrCreate() (*models.UserLanguage, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.UserLanguage), nil
	}
}

func (u userLanguageDo) FindByPage(offset int, limit int) (result []*models.UserLanguage, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userLanguageDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userLanguageDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userLanguageDo) Delete(models ...*models.UserLanguage) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userLanguageDo) withDO(do gen.Dao) *userLanguageDo {
	u.DO = *do.(*gen.DO)
	return u
}
