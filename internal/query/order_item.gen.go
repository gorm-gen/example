// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"example/internal/models"
)

func newOrderItem(db *gorm.DB, opts ...gen.DOOption) orderItem {
	_orderItem := orderItem{}

	_orderItem.orderItemDo.UseDB(db, opts...)
	_orderItem.orderItemDo.UseModel(&models.OrderItem{})

	tableName := _orderItem.orderItemDo.TableName()
	_orderItem.ALL = field.NewAsterisk(tableName)
	_orderItem.ID = field.NewInt64(tableName, "id")
	_orderItem.Sharding = field.NewString(tableName, "sharding")
	_orderItem.UID = field.NewInt(tableName, "uid")
	_orderItem.OrderNo = field.NewString(tableName, "order_no")
	_orderItem.Comment = field.NewString(tableName, "comment")
	_orderItem.ExpressNumber = field.NewString(tableName, "express_number")
	_orderItem.CreatedAt = field.NewTime(tableName, "created_at")
	_orderItem.UpdatedAt = field.NewTime(tableName, "updated_at")
	_orderItem.DeletedAt = field.NewField(tableName, "deleted_at")

	_orderItem.fillFieldMap()

	return _orderItem
}

type orderItem struct {
	orderItemDo

	ALL           field.Asterisk
	ID            field.Int64  // 记录ID
	Sharding      field.String // 分表关键字段[月份:202503]
	UID           field.Int    // 用户ID
	OrderNo       field.String // 订单号
	Comment       field.String // 订单评论
	ExpressNumber field.String // 快递单号
	CreatedAt     field.Time   // 创建日期
	UpdatedAt     field.Time   // 更新日期
	DeletedAt     field.Field  // 删除时间[null:未删除,非null:删除时间]

	fieldMap map[string]field.Expr
}

func (o orderItem) Table(newTableName string) *orderItem {
	o.orderItemDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o orderItem) As(alias string) *orderItem {
	o.orderItemDo.DO = *(o.orderItemDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *orderItem) updateTableName(table string) *orderItem {
	o.ALL = field.NewAsterisk(table)
	o.ID = field.NewInt64(table, "id")
	o.Sharding = field.NewString(table, "sharding")
	o.UID = field.NewInt(table, "uid")
	o.OrderNo = field.NewString(table, "order_no")
	o.Comment = field.NewString(table, "comment")
	o.ExpressNumber = field.NewString(table, "express_number")
	o.CreatedAt = field.NewTime(table, "created_at")
	o.UpdatedAt = field.NewTime(table, "updated_at")
	o.DeletedAt = field.NewField(table, "deleted_at")

	o.fillFieldMap()

	return o
}

func (o *orderItem) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *orderItem) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 9)
	o.fieldMap["id"] = o.ID
	o.fieldMap["sharding"] = o.Sharding
	o.fieldMap["uid"] = o.UID
	o.fieldMap["order_no"] = o.OrderNo
	o.fieldMap["comment"] = o.Comment
	o.fieldMap["express_number"] = o.ExpressNumber
	o.fieldMap["created_at"] = o.CreatedAt
	o.fieldMap["updated_at"] = o.UpdatedAt
	o.fieldMap["deleted_at"] = o.DeletedAt
}

func (o orderItem) clone(db *gorm.DB) orderItem {
	o.orderItemDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o orderItem) replaceDB(db *gorm.DB) orderItem {
	o.orderItemDo.ReplaceDB(db)
	return o
}

type orderItemDo struct{ gen.DO }

type IOrderItemDo interface {
	gen.SubQuery
	Debug() IOrderItemDo
	WithContext(ctx context.Context) IOrderItemDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IOrderItemDo
	WriteDB() IOrderItemDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IOrderItemDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IOrderItemDo
	Not(conds ...gen.Condition) IOrderItemDo
	Or(conds ...gen.Condition) IOrderItemDo
	Select(conds ...field.Expr) IOrderItemDo
	Where(conds ...gen.Condition) IOrderItemDo
	Order(conds ...field.Expr) IOrderItemDo
	Distinct(cols ...field.Expr) IOrderItemDo
	Omit(cols ...field.Expr) IOrderItemDo
	Join(table schema.Tabler, on ...field.Expr) IOrderItemDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IOrderItemDo
	RightJoin(table schema.Tabler, on ...field.Expr) IOrderItemDo
	Group(cols ...field.Expr) IOrderItemDo
	Having(conds ...gen.Condition) IOrderItemDo
	Limit(limit int) IOrderItemDo
	Offset(offset int) IOrderItemDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IOrderItemDo
	Unscoped() IOrderItemDo
	Create(values ...*models.OrderItem) error
	CreateInBatches(values []*models.OrderItem, batchSize int) error
	Save(values ...*models.OrderItem) error
	First() (*models.OrderItem, error)
	Take() (*models.OrderItem, error)
	Last() (*models.OrderItem, error)
	Find() ([]*models.OrderItem, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.OrderItem, err error)
	FindInBatches(result *[]*models.OrderItem, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.OrderItem) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IOrderItemDo
	Assign(attrs ...field.AssignExpr) IOrderItemDo
	Joins(fields ...field.RelationField) IOrderItemDo
	Preload(fields ...field.RelationField) IOrderItemDo
	FirstOrInit() (*models.OrderItem, error)
	FirstOrCreate() (*models.OrderItem, error)
	FindByPage(offset int, limit int) (result []*models.OrderItem, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IOrderItemDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (o orderItemDo) Debug() IOrderItemDo {
	return o.withDO(o.DO.Debug())
}

func (o orderItemDo) WithContext(ctx context.Context) IOrderItemDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o orderItemDo) ReadDB() IOrderItemDo {
	return o.Clauses(dbresolver.Read)
}

func (o orderItemDo) WriteDB() IOrderItemDo {
	return o.Clauses(dbresolver.Write)
}

func (o orderItemDo) Session(config *gorm.Session) IOrderItemDo {
	return o.withDO(o.DO.Session(config))
}

func (o orderItemDo) Clauses(conds ...clause.Expression) IOrderItemDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o orderItemDo) Returning(value interface{}, columns ...string) IOrderItemDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o orderItemDo) Not(conds ...gen.Condition) IOrderItemDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o orderItemDo) Or(conds ...gen.Condition) IOrderItemDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o orderItemDo) Select(conds ...field.Expr) IOrderItemDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o orderItemDo) Where(conds ...gen.Condition) IOrderItemDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o orderItemDo) Order(conds ...field.Expr) IOrderItemDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o orderItemDo) Distinct(cols ...field.Expr) IOrderItemDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o orderItemDo) Omit(cols ...field.Expr) IOrderItemDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o orderItemDo) Join(table schema.Tabler, on ...field.Expr) IOrderItemDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o orderItemDo) LeftJoin(table schema.Tabler, on ...field.Expr) IOrderItemDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o orderItemDo) RightJoin(table schema.Tabler, on ...field.Expr) IOrderItemDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o orderItemDo) Group(cols ...field.Expr) IOrderItemDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o orderItemDo) Having(conds ...gen.Condition) IOrderItemDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o orderItemDo) Limit(limit int) IOrderItemDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o orderItemDo) Offset(offset int) IOrderItemDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o orderItemDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IOrderItemDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o orderItemDo) Unscoped() IOrderItemDo {
	return o.withDO(o.DO.Unscoped())
}

func (o orderItemDo) Create(values ...*models.OrderItem) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o orderItemDo) CreateInBatches(values []*models.OrderItem, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o orderItemDo) Save(values ...*models.OrderItem) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o orderItemDo) First() (*models.OrderItem, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.OrderItem), nil
	}
}

func (o orderItemDo) Take() (*models.OrderItem, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.OrderItem), nil
	}
}

func (o orderItemDo) Last() (*models.OrderItem, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.OrderItem), nil
	}
}

func (o orderItemDo) Find() ([]*models.OrderItem, error) {
	result, err := o.DO.Find()
	return result.([]*models.OrderItem), err
}

func (o orderItemDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.OrderItem, err error) {
	buf := make([]*models.OrderItem, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o orderItemDo) FindInBatches(result *[]*models.OrderItem, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o orderItemDo) Attrs(attrs ...field.AssignExpr) IOrderItemDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o orderItemDo) Assign(attrs ...field.AssignExpr) IOrderItemDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o orderItemDo) Joins(fields ...field.RelationField) IOrderItemDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o orderItemDo) Preload(fields ...field.RelationField) IOrderItemDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o orderItemDo) FirstOrInit() (*models.OrderItem, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.OrderItem), nil
	}
}

func (o orderItemDo) FirstOrCreate() (*models.OrderItem, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.OrderItem), nil
	}
}

func (o orderItemDo) FindByPage(offset int, limit int) (result []*models.OrderItem, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o orderItemDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o orderItemDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o orderItemDo) Delete(models ...*models.OrderItem) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *orderItemDo) withDO(do gen.Dao) *orderItemDo {
	o.DO = *do.(*gen.DO)
	return o
}
