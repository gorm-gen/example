// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"example/internal/models"
)

func newClassify(db *gorm.DB, opts ...gen.DOOption) classify {
	_classify := classify{}

	_classify.classifyDo.UseDB(db, opts...)
	_classify.classifyDo.UseModel(&models.Classify{})

	tableName := _classify.classifyDo.TableName()
	_classify.ALL = field.NewAsterisk(tableName)
	_classify.ID = field.NewInt(tableName, "id")
	_classify.Name = field.NewString(tableName, "name")
	_classify.Pid = field.NewInt(tableName, "pid")
	_classify.CreatedAt = field.NewTime(tableName, "created_at")
	_classify.UpdatedAt = field.NewTime(tableName, "updated_at")
	_classify.DeletedAt = field.NewField(tableName, "deleted_at")
	_classify.Parent = classifyBelongsToParent{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Parent", "models.Classify"),
	}

	_classify.Child = classifyHasManyChild{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Child", "models.Classify"),
	}

	_classify.fillFieldMap()

	return _classify
}

// classify 分类表
type classify struct {
	classifyDo

	ALL       field.Asterisk
	ID        field.Int    // 分类ID
	Name      field.String // 名称
	Pid       field.Int    // 父级ID
	CreatedAt field.Time   // 创建日期
	UpdatedAt field.Time   // 更新日期
	DeletedAt field.Field  // 删除时间戳[0:未删除,非0:删除时间戳]
	Parent    classifyBelongsToParent

	Child classifyHasManyChild

	fieldMap map[string]field.Expr
}

func (c classify) Table(newTableName string) *classify {
	c.classifyDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c classify) As(alias string) *classify {
	c.classifyDo.DO = *(c.classifyDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *classify) updateTableName(table string) *classify {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt(table, "id")
	c.Name = field.NewString(table, "name")
	c.Pid = field.NewInt(table, "pid")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.DeletedAt = field.NewField(table, "deleted_at")

	c.fillFieldMap()

	return c
}

func (c *classify) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *classify) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 8)
	c.fieldMap["id"] = c.ID
	c.fieldMap["name"] = c.Name
	c.fieldMap["pid"] = c.Pid
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt

}

func (c classify) clone(db *gorm.DB) classify {
	c.classifyDo.ReplaceConnPool(db.Statement.ConnPool)
	c.Parent.db = db.Session(&gorm.Session{Initialized: true})
	c.Parent.db.Statement.ConnPool = db.Statement.ConnPool
	c.Child.db = db.Session(&gorm.Session{Initialized: true})
	c.Child.db.Statement.ConnPool = db.Statement.ConnPool
	return c
}

func (c classify) replaceDB(db *gorm.DB) classify {
	c.classifyDo.ReplaceDB(db)
	c.Parent.db = db.Session(&gorm.Session{})
	c.Child.db = db.Session(&gorm.Session{})
	return c
}

type classifyBelongsToParent struct {
	db *gorm.DB

	field.RelationField
}

func (a classifyBelongsToParent) Where(conds ...field.Expr) *classifyBelongsToParent {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a classifyBelongsToParent) WithContext(ctx context.Context) *classifyBelongsToParent {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a classifyBelongsToParent) Session(session *gorm.Session) *classifyBelongsToParent {
	a.db = a.db.Session(session)
	return &a
}

func (a classifyBelongsToParent) Model(m *models.Classify) *classifyBelongsToParentTx {
	return &classifyBelongsToParentTx{a.db.Model(m).Association(a.Name())}
}

func (a classifyBelongsToParent) Unscoped() *classifyBelongsToParent {
	a.db = a.db.Unscoped()
	return &a
}

type classifyBelongsToParentTx struct{ tx *gorm.Association }

func (a classifyBelongsToParentTx) Find() (result *models.Classify, err error) {
	return result, a.tx.Find(&result)
}

func (a classifyBelongsToParentTx) Append(values ...*models.Classify) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a classifyBelongsToParentTx) Replace(values ...*models.Classify) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a classifyBelongsToParentTx) Delete(values ...*models.Classify) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a classifyBelongsToParentTx) Clear() error {
	return a.tx.Clear()
}

func (a classifyBelongsToParentTx) Count() int64 {
	return a.tx.Count()
}

func (a classifyBelongsToParentTx) Unscoped() *classifyBelongsToParentTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type classifyHasManyChild struct {
	db *gorm.DB

	field.RelationField
}

func (a classifyHasManyChild) Where(conds ...field.Expr) *classifyHasManyChild {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a classifyHasManyChild) WithContext(ctx context.Context) *classifyHasManyChild {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a classifyHasManyChild) Session(session *gorm.Session) *classifyHasManyChild {
	a.db = a.db.Session(session)
	return &a
}

func (a classifyHasManyChild) Model(m *models.Classify) *classifyHasManyChildTx {
	return &classifyHasManyChildTx{a.db.Model(m).Association(a.Name())}
}

func (a classifyHasManyChild) Unscoped() *classifyHasManyChild {
	a.db = a.db.Unscoped()
	return &a
}

type classifyHasManyChildTx struct{ tx *gorm.Association }

func (a classifyHasManyChildTx) Find() (result []*models.Classify, err error) {
	return result, a.tx.Find(&result)
}

func (a classifyHasManyChildTx) Append(values ...*models.Classify) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a classifyHasManyChildTx) Replace(values ...*models.Classify) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a classifyHasManyChildTx) Delete(values ...*models.Classify) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a classifyHasManyChildTx) Clear() error {
	return a.tx.Clear()
}

func (a classifyHasManyChildTx) Count() int64 {
	return a.tx.Count()
}

func (a classifyHasManyChildTx) Unscoped() *classifyHasManyChildTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type classifyDo struct{ gen.DO }

type IClassifyDo interface {
	gen.SubQuery
	Debug() IClassifyDo
	WithContext(ctx context.Context) IClassifyDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IClassifyDo
	WriteDB() IClassifyDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IClassifyDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IClassifyDo
	Not(conds ...gen.Condition) IClassifyDo
	Or(conds ...gen.Condition) IClassifyDo
	Select(conds ...field.Expr) IClassifyDo
	Where(conds ...gen.Condition) IClassifyDo
	Order(conds ...field.Expr) IClassifyDo
	Distinct(cols ...field.Expr) IClassifyDo
	Omit(cols ...field.Expr) IClassifyDo
	Join(table schema.Tabler, on ...field.Expr) IClassifyDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IClassifyDo
	RightJoin(table schema.Tabler, on ...field.Expr) IClassifyDo
	Group(cols ...field.Expr) IClassifyDo
	Having(conds ...gen.Condition) IClassifyDo
	Limit(limit int) IClassifyDo
	Offset(offset int) IClassifyDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IClassifyDo
	Unscoped() IClassifyDo
	Create(values ...*models.Classify) error
	CreateInBatches(values []*models.Classify, batchSize int) error
	Save(values ...*models.Classify) error
	First() (*models.Classify, error)
	Take() (*models.Classify, error)
	Last() (*models.Classify, error)
	Find() ([]*models.Classify, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Classify, err error)
	FindInBatches(result *[]*models.Classify, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.Classify) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IClassifyDo
	Assign(attrs ...field.AssignExpr) IClassifyDo
	Joins(fields ...field.RelationField) IClassifyDo
	Preload(fields ...field.RelationField) IClassifyDo
	FirstOrInit() (*models.Classify, error)
	FirstOrCreate() (*models.Classify, error)
	FindByPage(offset int, limit int) (result []*models.Classify, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IClassifyDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c classifyDo) Debug() IClassifyDo {
	return c.withDO(c.DO.Debug())
}

func (c classifyDo) WithContext(ctx context.Context) IClassifyDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c classifyDo) ReadDB() IClassifyDo {
	return c.Clauses(dbresolver.Read)
}

func (c classifyDo) WriteDB() IClassifyDo {
	return c.Clauses(dbresolver.Write)
}

func (c classifyDo) Session(config *gorm.Session) IClassifyDo {
	return c.withDO(c.DO.Session(config))
}

func (c classifyDo) Clauses(conds ...clause.Expression) IClassifyDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c classifyDo) Returning(value interface{}, columns ...string) IClassifyDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c classifyDo) Not(conds ...gen.Condition) IClassifyDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c classifyDo) Or(conds ...gen.Condition) IClassifyDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c classifyDo) Select(conds ...field.Expr) IClassifyDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c classifyDo) Where(conds ...gen.Condition) IClassifyDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c classifyDo) Order(conds ...field.Expr) IClassifyDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c classifyDo) Distinct(cols ...field.Expr) IClassifyDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c classifyDo) Omit(cols ...field.Expr) IClassifyDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c classifyDo) Join(table schema.Tabler, on ...field.Expr) IClassifyDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c classifyDo) LeftJoin(table schema.Tabler, on ...field.Expr) IClassifyDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c classifyDo) RightJoin(table schema.Tabler, on ...field.Expr) IClassifyDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c classifyDo) Group(cols ...field.Expr) IClassifyDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c classifyDo) Having(conds ...gen.Condition) IClassifyDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c classifyDo) Limit(limit int) IClassifyDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c classifyDo) Offset(offset int) IClassifyDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c classifyDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IClassifyDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c classifyDo) Unscoped() IClassifyDo {
	return c.withDO(c.DO.Unscoped())
}

func (c classifyDo) Create(values ...*models.Classify) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c classifyDo) CreateInBatches(values []*models.Classify, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c classifyDo) Save(values ...*models.Classify) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c classifyDo) First() (*models.Classify, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.Classify), nil
	}
}

func (c classifyDo) Take() (*models.Classify, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.Classify), nil
	}
}

func (c classifyDo) Last() (*models.Classify, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.Classify), nil
	}
}

func (c classifyDo) Find() ([]*models.Classify, error) {
	result, err := c.DO.Find()
	return result.([]*models.Classify), err
}

func (c classifyDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Classify, err error) {
	buf := make([]*models.Classify, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c classifyDo) FindInBatches(result *[]*models.Classify, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c classifyDo) Attrs(attrs ...field.AssignExpr) IClassifyDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c classifyDo) Assign(attrs ...field.AssignExpr) IClassifyDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c classifyDo) Joins(fields ...field.RelationField) IClassifyDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c classifyDo) Preload(fields ...field.RelationField) IClassifyDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c classifyDo) FirstOrInit() (*models.Classify, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.Classify), nil
	}
}

func (c classifyDo) FirstOrCreate() (*models.Classify, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.Classify), nil
	}
}

func (c classifyDo) FindByPage(offset int, limit int) (result []*models.Classify, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c classifyDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c classifyDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c classifyDo) Delete(models ...*models.Classify) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *classifyDo) withDO(do gen.Dao) *classifyDo {
	c.DO = *do.(*gen.DO)
	return c
}
